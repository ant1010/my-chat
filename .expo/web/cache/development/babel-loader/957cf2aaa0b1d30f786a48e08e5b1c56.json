{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { useEffect, useState } from 'react';\nimport styles from \"./styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\nimport { getUser } from \"../../screens/queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ContactListItem = function ContactListItem(props) {\n  var user = props.user;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      foundChatRoomID = _useState2[0],\n      setFoundChatRoomID = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      click = _useState4[0],\n      setClick = _useState4[1];\n\n  useEffect(function () {\n    var findDuplicate = function findDuplicate() {\n      var userInfo, currUser, currUserInfo, user1, user2, result;\n      return _regeneratorRuntime.async(function findDuplicate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: user.id\n              })));\n\n            case 2:\n              userInfo = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 5:\n              currUser = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: currUser.attributes.sub\n              })));\n\n            case 8:\n              currUserInfo = _context.sent;\n              user1 = userInfo.data.getUser.chatRoomUser.items;\n              user2 = currUserInfo.data.getUser.chatRoomUser.items;\n              console.log(user1);\n              console.log(user2);\n              result = user1.filter(function (o1) {\n                return user2.some(function (o2) {\n                  return o1.chatRoomID === o2.chatRoomID && o1.chatRoom.chatRoomUsers.items.length === 2;\n                });\n              });\n\n              if (!(result[0] != null)) {\n                _context.next = 17;\n                break;\n              }\n\n              setFoundChatRoomID(result[0]);\n              return _context.abrupt(\"return\", result);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    findDuplicate();\n  }, [click]);\n  var navigation = useNavigation();\n\n  var onClick = function onClick() {\n    return _regeneratorRuntime.async(function onClick$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setClick(true);\n            _context2.prev = 1;\n\n            if (!(foundChatRoomID.chatRoomID != null)) {\n              _context2.next = 5;\n              break;\n            }\n\n            navigation.navigate('ChatRoom', {\n              id: foundChatRoomID.chatRoomID,\n              name: foundChatRoomID.chatRoom.chatRoomUsers.items[1].user.name\n            });\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: onClick,\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.lefContainer,\n        children: [_jsx(Image, {\n          source: {\n            uri: user.imageUri\n          },\n          style: styles.avatar\n        }), _jsx(View, {\n          style: styles.midContainer,\n          children: _jsx(Text, {\n            style: styles.username,\n            children: user.name\n          })\n        })]\n      })\n    })\n  });\n};\n\nexport default ContactListItem;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/ContactListItem/index.tsx"],"names":["React","useEffect","useState","styles","useNavigation","API","graphqlOperation","Auth","getUser","ContactListItem","props","user","foundChatRoomID","setFoundChatRoomID","click","setClick","findDuplicate","graphql","id","userInfo","currentAuthenticatedUser","currUser","attributes","sub","currUserInfo","user1","data","chatRoomUser","items","user2","console","log","result","filter","o1","some","o2","chatRoomID","chatRoom","chatRoomUsers","length","navigation","onClick","navigate","name","container","lefContainer","uri","imageUri","avatar","midContainer","username"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback,\n \n} from \"react-native\";\nimport {useEffect,useState} from 'react';\nimport { User } from \"../../types\";\nimport styles from \"./styles\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {API,graphqlOperation,Auth} from \"aws-amplify\";\nimport {createChatRoom, createChatRoomUser} from \"../../src/graphql/mutations\"\nimport { getUser } from '../../screens/queries';\n\nexport type ContactListItemProps = {\n  user: User;\n}\n\nconst ContactListItem = (props: ContactListItemProps) => {\n  const { user } = props;\n  const [foundChatRoomID,setFoundChatRoomID] = useState([]);\n  const [click,setClick] = useState(false);\n  useEffect (() =>{\n      const findDuplicate = async () => {\n      const userInfo = await API.graphql(graphqlOperation(getUser,{id:user.id}));\n      const currUser = await Auth.currentAuthenticatedUser();\n      const currUserInfo = await API.graphql(graphqlOperation(getUser,{id:currUser.attributes.sub}));\n      const user1 = userInfo.data.getUser.chatRoomUser.items;\n      const user2 = currUserInfo.data.getUser.chatRoomUser.items;\n      console.log(user1);\n      console.log(user2);\n      var result = user1.filter(function(o1){\n        \n        return user2.some(function(o2){\n          \n            return ((o1.chatRoomID === o2.chatRoomID) && (o1.chatRoom.chatRoomUsers.items.length === 2));          \n        }); })\n       if(result[0] != null){\n         setFoundChatRoomID(result[0]);\n        return result;\n       }\n    }\n    \n    findDuplicate();\n  },[click])\n   \n  \n  const navigation = useNavigation();\n\n  const onClick = async() => {\n   // navigate to chat room with this user\n   setClick(true);\n     try{\n       \n       \n        if(foundChatRoomID.chatRoomID != null){\n         \n          navigation.navigate('ChatRoom', {\n            id: foundChatRoomID.chatRoomID,\n            name: foundChatRoomID.chatRoom.chatRoomUsers.items[1].user.name,\n          })\n\n          return;\n        }\n        // const newChatRoomData = await API.graphql(graphqlOperation(createChatRoom,{input:{}}))\n        // if(!newChatRoomData.data){\n        //     console.log(\"Failed to create a chat room\");\n        //     return;\n        // }\n        // const newChatRoom = newChatRoomData.data.createChatRoom;\n        //  setFoundChatRoomID(newChatRoom.id);\n        // const room = await API.graphql(graphqlOperation(createChatRoomUser,{input:{userID: user.id,chatRoomID:newChatRoom.id}}));\n        \n        // const userInfo = await Auth.currentAuthenticatedUser();\n        // await API.graphql(graphqlOperation(createChatRoomUser,{input:{userID: userInfo.attributes.sub,chatRoomID:newChatRoom.id}}));\n       \n        // navigation.navigate('ChatRoom', {\n        //     id: newChatRoom.id,\n        //     name: \"Harcoded name\",\n        //   })\n     }catch(e){\n         console.log(e);\n     }\n  }\n\n  return (\n    <TouchableWithoutFeedback onPress={onClick}>\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n          <Image source={{ uri: user.imageUri }} style={styles.avatar}/>\n\n          <View style={styles.midContainer}>\n            <Text style={styles.username}>{user.name}</Text>\n            {/*<Text numberOfLines={2} style={styles.status}>{user.status}</Text>*/}\n          </View>\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default ContactListItem;"]},"metadata":{},"sourceType":"module"}