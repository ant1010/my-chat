{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useRoute } from '@react-navigation/native';\nimport ChatMessage from \"../components/ChatMesage\";\nimport { useEffect, useState } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport InputBox from \"../components/InputBox\";\nimport { messagesByChatRoom } from \"../src/graphql/queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myId = _useState4[0],\n      setMyId = _useState4[1];\n\n  var route = useRoute();\n  useEffect(function () {\n    var fetchMessages = function fetchMessages() {\n      var messageData;\n      return _regeneratorRuntime.async(function fetchMessages$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(messagesByChatRoom, {\n                chatRoomID: route.params.id,\n                sortDirection: \"DESC\"\n              })));\n\n            case 2:\n              messageData = _context.sent;\n              console.log(messageData);\n              setMessages(messageData.data.messagesByChatRoom.items);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchMessages();\n  }, []);\n  useEffect(function () {\n    var getMyId = function getMyId() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getMyId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context2.sent;\n              setMyId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getMyId();\n  }, []);\n  return _jsxs(View, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [_jsx(FlatList, {\n      data: messages,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ChatMessage, {\n          message: item\n        });\n      },\n      inverted: true\n    }), _jsx(InputBox, {\n      chatRoomID: route.params.id\n    })]\n  });\n};\n\nexport default ChatRoomScreen;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ChatRoomScreen.tsx"],"names":["React","useRoute","ChatMessage","useEffect","useState","API","graphqlOperation","InputBox","messagesByChatRoom","ChatRoomScreen","messages","setMessages","myId","setMyId","route","fetchMessages","graphql","chatRoomID","params","id","sortDirection","messageData","console","log","data","items","getMyId","Auth","currentAuthenticatedUser","userInfo","attributes","sub","width","height","item"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,SAASC,QAAT,QAAyB,0BAAzB;AAGA,OAAOC,WAAP;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,SAAQC,GAAR,EAAYC,gBAAZ,QAAmC,aAAnC;AACA,OAAOC,QAAP;AACA,SAAQC,kBAAR;;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,kBAA+BL,QAAQ,CAAC,EAAD,CAAvC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAgBC,WAAhB;;AACA,mBAAwBP,QAAQ,CAAC,IAAD,CAAhC;AAAA;AAAA,MAAOQ,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,KAAK,GAAGb,QAAQ,EAAtB;AAGAE,EAAAA,SAAS,CAAC,YAAK;AACb,QAAMY,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACMV,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACE,kBAAD,EAAoB;AAACS,gBAAAA,UAAU,EAACH,KAAK,CAACI,MAAN,CAAaC,EAAzB;AAA4BC,gBAAAA,aAAa,EAAC;AAA1C,eAApB,CAA5B,CADN;;AAAA;AACdC,cAAAA,WADc;AAEpBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAV,cAAAA,WAAW,CAACU,WAAW,CAACG,IAAZ,CAAiBhB,kBAAjB,CAAoCiB,KAArC,CAAX;;AAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAKAV,IAAAA,aAAa;AACd,GAPQ,EAOP,EAPO,CAAT;AASAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMuB,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACSC,IAAI,CAACC,wBAAL,EADT;;AAAA;AACRC,cAAAA,QADQ;AAEdhB,cAAAA,OAAO,CAACgB,QAAQ,CAACC,UAAT,CAAoBC,GAArB,CAAP;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAIAL,IAAAA,OAAO;AACR,GANQ,EAMN,EANM,CAAT;AAOA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACM,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAAb;AAAA,eACE,KAAC,QAAD;AACE,MAAA,IAAI,EAAEvB,QADR;AAEE,MAAA,UAAU,EAAE;AAAA,YAAGwB,IAAH,QAAGA,IAAH;AAAA,eAAc,KAAC,WAAD;AAAa,UAAA,OAAO,EAAEA;AAAtB,UAAd;AAAA,OAFd;AAGE,MAAA,QAAQ;AAHV,MADF,EAOE,KAAC,QAAD;AAAU,MAAA,UAAU,EAAIpB,KAAK,CAACI,MAAN,CAAaC;AAArC,MAPF;AAAA,IADF;AAWD,CAjCD;;AAmCA,eAAeV,cAAf","sourcesContent":["import React from 'react';\nimport {FlatList, Text, ImageBackground ,View} from 'react-native';\n\nimport { useRoute } from '@react-navigation/native';\n\nimport chatRoomData from '../data/Chats';\nimport ChatMessage from \"../components/ChatMesage\";\nimport {useEffect,useState} from 'react';\nimport {API,graphqlOperation} from 'aws-amplify';\nimport InputBox from \"../components/InputBox\";\nimport {messagesByChatRoom} from '../src/graphql/queries';\nconst ChatRoomScreen = () => {\n  const [messages,setMessages] = useState([]);\n  const [myId, setMyId] = useState(null);\n  const route = useRoute();\n\n  // console.log(route.params)\n  useEffect(() =>{\n    const fetchMessages = async () => {\n      const messageData = await API.graphql(graphqlOperation(messagesByChatRoom,{chatRoomID:route.params.id,sortDirection:\"DESC\"}))\n      console.log(messageData);\n      setMessages(messageData.data.messagesByChatRoom.items);\n    }\n    fetchMessages();\n  },[])\n\n  useEffect(() => {\n    const getMyId = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      setMyId(userInfo.attributes.sub);\n    }\n    getMyId();\n  }, [])\n  return (\n    <View style={{width: '100%', height: '100%'}} >\n      <FlatList\n        data={messages}\n        renderItem={({ item }) => <ChatMessage message={item} />}\n        inverted\n      />\n\n      <InputBox chatRoomID = {route.params.id} />\n    </View>\n  );\n}\n\nexport default ChatRoomScreen;"]},"metadata":{},"sourceType":"module"}