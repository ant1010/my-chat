{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Auth } from 'aws-amplify';\nimport { useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatListItem = function ChatListItem(props) {\n  var chatRoom = props.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      otherUser = _useState2[0],\n      setOtherUser = _useState2[1];\n\n  var navigation = useNavigation();\n  var user = chatRoom.chatRoomUsers.items[1].user;\n  useEffect(function () {\n    var getOtherUser = function getOtherUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getOtherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n\n              if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\n                setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n              } else {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getOtherUser();\n  }, []);\n\n  var onClick = function onClick() {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id,\n      name: user.name\n    });\n  };\n\n  if (!otherUser) {\n    return null;\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: onClick,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.lefContainer,\n        children: [_jsx(Image, {\n          source: {\n            uri: otherUser.imageUri\n          },\n          style: styles.avatar\n        }), _jsxs(View, {\n          style: styles.midContainer,\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: otherUser.name\n          }), _jsx(Text, {\n            numberOfLines: 2,\n            style: styles.lastMessage,\n            children: chatRoom.lastMessage ? \"{chatRoom.lastMessage.content}\" : \" \"\n          })]\n        })]\n      }), _jsx(Text, {\n        style: styles.time,\n        children: chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")\n      })]\n    })\n  });\n};\n\nexport default ChatListItem;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/ChatListItem/index.tsx"],"names":["React","styles","moment","useNavigation","Auth","useEffect","useState","ChatListItem","props","chatRoom","otherUser","setOtherUser","navigation","user","chatRoomUsers","items","getOtherUser","currentAuthenticatedUser","userInfo","id","attributes","sub","onClick","navigate","name","container","lefContainer","uri","imageUri","avatar","midContainer","username","lastMessage","time","createdAt","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback\n} from \"react-native\";\nimport { ChatRoom } from \"../../types\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {Auth} from 'aws-amplify';\nimport {useEffect,useState} from 'react';\nexport type ChatListItemProps = {\n  chatRoom: ChatRoom;\n}\n\nconst ChatListItem = (props: ChatListItemProps) => {\n  const { chatRoom } = props;\n  const [otherUser,setOtherUser] = useState(null);\n\n  const navigation = useNavigation();\n  \n  const user = chatRoom.chatRoomUsers.items[1].user;\n\n  useEffect (() =>{\n    const getOtherUser = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      if(chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub){\n        setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n      }else{\n        setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n      }\n      \n    }\n  \n    getOtherUser();\n  },[])\n\n  \n\n  const onClick = () => {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id,\n      name: user.name,\n    })\n  }\n  if(!otherUser){\n    return null;\n  }\n  \n  return (\n    <TouchableWithoutFeedback onPress={onClick}>\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n          <Image source={{ uri: otherUser.imageUri }} style={styles.avatar}/>\n\n          <View style={styles.midContainer}>\n            <Text style={styles.username}>{otherUser.name}</Text>\n            <Text numberOfLines={2} style={styles.lastMessage}>{chatRoom.lastMessage ? `{chatRoom.lastMessage.content}` : \" \"}</Text>\n          </View>\n\n        </View>\n\n        <Text style={styles.time}>\n          {chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default ChatListItem;"]},"metadata":{},"sourceType":"module"}