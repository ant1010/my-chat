{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport styles from \"./styles\";\nimport { Auth } from \"aws-amplify\";\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EventInput = function EventInput() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myUserId = _useState4[0],\n      setMyUserId = _useState4[1];\n\n  useEffect(function () {\n    var fetchUser = function fetchUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function fetchUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n              setMyUserId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUser();\n  }, []);\n\n  var onMicrophonePress = function onMicrophonePress() {\n    console.warn('Microphone');\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n    keyboardVerticalOffset: 100,\n    style: {\n      width: '100%'\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: styles.mainContainer,\n        children: _jsx(TextInput, {\n          placeholder: \"Type a message\",\n          style: styles.textInput,\n          multiline: true,\n          value: message,\n          onChangeText: setMessage\n        })\n      }), _jsx(TouchableOpacity, {\n        children: _jsx(View, {\n          style: styles.buttonContainer,\n          children: !message ? _jsx(MaterialCommunityIcons, {\n            name: \"microphone\",\n            size: 28,\n            color: \"white\"\n          }) : _jsx(MaterialIcons, {\n            name: \"send\",\n            size: 28,\n            color: \"white\"\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default EventInput;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/EventInput/index.tsx"],"names":["React","useState","useEffect","styles","Auth","MaterialCommunityIcons","MaterialIcons","EventInput","message","setMessage","myUserId","setMyUserId","fetchUser","currentAuthenticatedUser","userInfo","attributes","sub","onMicrophonePress","console","warn","Platform","OS","width","container","mainContainer","textInput","buttonContainer"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;;;;;;AAGA,OAAOC,MAAP;AACA,SAAWC,IAAX,QAAwC,aAAxC;AAEA,SACEC,sBADF,EAEEC,aAFF,QAMO,oBANP;;;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAGvB,kBAA8BN,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOO,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCR,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOS,QAAP;AAAA,MAAiBC,WAAjB;;AAEET,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMU,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOR,IAAI,CAACS,wBAAL,EADP;;AAAA;AACVC,cAAAA,QADU;AAGhBH,cAAAA,WAAW,CAACG,QAAQ,CAACC,UAAT,CAAoBC,GAArB,CAAX;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAKAJ,IAAAA,SAAS;AACV,GAPQ,EAOP,EAPO,CAAT;;AAQF,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BC,IAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACD,GAFD;;AAQA,SACE,KAAC,oBAAD;AAAsB,IAAA,QAAQ,EAAEC,QAAQ,CAACC,EAAT,IAAe,KAAf,GAAqB,SAArB,GAA+B,QAA/D;AACA,IAAA,sBAAsB,EAAG,GADzB;AAC6B,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC;AAAP,KADpC;AAAA,cAEA,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEnB,MAAM,CAACoB,SAApB;AAAA,iBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEpB,MAAM,CAACqB,aAApB;AAAA,kBAEE,KAAC,SAAD;AACE,UAAA,WAAW,EAAE,gBADf;AAEE,UAAA,KAAK,EAAErB,MAAM,CAACsB,SAFhB;AAGE,UAAA,SAAS,MAHX;AAIE,UAAA,KAAK,EAAEjB,OAJT;AAKE,UAAA,YAAY,EAAEC;AALhB;AAFF,QADF,EAYE,KAAC,gBAAD;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACuB,eAApB;AAAA,oBACG,CAAClB,OAAD,GACG,KAAC,sBAAD;AAAwB,YAAA,IAAI,EAAC,YAA7B;AAA0C,YAAA,IAAI,EAAE,EAAhD;AAAoD,YAAA,KAAK,EAAC;AAA1D,YADH,GAEG,KAAC,aAAD;AAAe,YAAA,IAAI,EAAC,MAApB;AAA2B,YAAA,IAAI,EAAE,EAAjC;AAAqC,YAAA,KAAK,EAAC;AAA3C;AAHN;AADF,QAZF;AAAA;AAFA,IADF;AAyBD,CA/CD;;AAiDA,eAAeD,UAAf","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport {View, Text, TextInput, KeyboardAvoidingView,TouchableOpacity,Platform} from \"react-native\";\n\nimport styles from './styles';\nimport{API,Auth,graphqlOperation,} from \"aws-amplify\";\nimport {createMessage,updateChatRoom} from \"../../src/graphql/mutations\";\nimport {\n  MaterialCommunityIcons,\n  MaterialIcons,\n  FontAwesome5,\n  Entypo,\n  Fontisto,\n} from '@expo/vector-icons';\n\nconst EventInput = () => {\n\n  //const {chatRoomID} = props;\n  const [message, setMessage] = useState('');\n  const [myUserId, setMyUserId] = useState('');\n\n    useEffect(() => {\n      const fetchUser = async () => {\n        const userInfo = await Auth.currentAuthenticatedUser();\n\n        setMyUserId(userInfo.attributes.sub);\n      }\n      fetchUser();\n    },[])\n  const onMicrophonePress = () => {\n    console.warn('Microphone')\n  }\n\n\n  \n  \n\n  return (\n    <KeyboardAvoidingView behavior={Platform.OS == \"ios\"?\"padding\":\"height\"}\n    keyboardVerticalOffset ={100}style={{width:'100%'}}>\n    <View style={styles.container}>\n      <View style={styles.mainContainer}>\n     \n        <TextInput\n          placeholder={\"Type a message\"}\n          style={styles.textInput}\n          multiline\n          value={message}\n          onChangeText={setMessage}\n        />\n       \n      </View>\n      <TouchableOpacity >\n        <View style={styles.buttonContainer}>\n          {!message\n            ? <MaterialCommunityIcons name=\"microphone\" size={28} color=\"white\" />\n            : <MaterialIcons name=\"send\" size={28} color=\"white\" />}\n        </View>\n      </TouchableOpacity>\n    </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nexport default EventInput;"]},"metadata":{},"sourceType":"module"}