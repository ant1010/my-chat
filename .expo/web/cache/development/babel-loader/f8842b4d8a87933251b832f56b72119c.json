{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Auth } from 'aws-amplify';\nimport { useEffect, useState } from 'react';\nimport { Swipeable, TouchableOpacity } from 'react-native-gesture-handler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatListItem = function ChatListItem(props) {\n  var chatRoom = props.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      otherUser = _useState2[0],\n      setOtherUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newMessage = _useState4[0],\n      setNewMessage = _useState4[1];\n\n  var navigation = useNavigation();\n  var user = chatRoom.chatRoomUsers.items[1].user;\n  useEffect(function () {\n    var getOtherUser = function getOtherUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getOtherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n\n              if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\n                setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n              } else {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getOtherUser();\n  }, []);\n\n  var onClick = function onClick() {\n    navigation.navigate(\"ChatRoom\", {\n      id: chatRoom.id,\n      name: user.name\n    });\n  };\n\n  if (!otherUser) {\n    return null;\n  }\n\n  var renderRightActions = function renderRightActions(progress, dragX) {\n    var opacity = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [1, 0],\n      extrapolate: 'clamp'\n    });\n    return _jsxs(View, {\n      style: styles.swipedRow,\n      children: [_jsx(View, {\n        style: styles.swipedConfirmationContainer,\n        children: _jsx(Text, {\n          style: styles.deleteConfirmationText,\n          children: \"Are you sure?\"\n        })\n      }), _jsx(Animated.View, {\n        style: [styles.deleteButton, {\n          opacity: opacity\n        }],\n        children: _jsx(TouchableOpacity, {\n          children: _jsx(Text, {\n            style: styles.deleteButtonText,\n            children: \"Delete\"\n          })\n        })\n      })]\n    });\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: onClick,\n    children: _jsx(Swipeable, {\n      renderRightActions: renderRightActions,\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [_jsxs(View, {\n          style: styles.lefContainer,\n          children: [_jsx(Image, {\n            source: {\n              uri: otherUser.imageUri\n            },\n            style: styles.avatar\n          }), _jsxs(View, {\n            style: styles.midContainer,\n            children: [_jsx(Text, {\n              style: styles.username,\n              children: otherUser.name\n            }), _jsx(Text, {\n              numberOfLines: 2,\n              style: styles.lastMessage,\n              children: chatRoom.lastMessage ? chatRoom.lastMessage.user.name + \": \" + chatRoom.lastMessage.content : \"none\"\n            })]\n          })]\n        }), _jsx(Text, {\n          style: styles.time,\n          children: chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")\n        })]\n      })\n    })\n  });\n};\n\nexport default ChatListItem;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/ChatListItem/index.tsx"],"names":["React","styles","moment","useNavigation","Auth","useEffect","useState","Swipeable","TouchableOpacity","ChatListItem","props","chatRoom","otherUser","setOtherUser","newMessage","setNewMessage","navigation","user","chatRoomUsers","items","getOtherUser","currentAuthenticatedUser","userInfo","id","attributes","sub","onClick","navigate","name","renderRightActions","progress","dragX","opacity","interpolate","inputRange","outputRange","extrapolate","swipedRow","swipedConfirmationContainer","deleteConfirmationText","deleteButton","deleteButtonText","container","lefContainer","uri","imageUri","avatar","midContainer","username","lastMessage","content","time","createdAt","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback,\n  Animated\n} from \"react-native\";\nimport { ChatRoom } from \"../../types\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  API,\n  graphqlOperation,\n  Auth,\n\n}from 'aws-amplify';\nimport {useEffect,useState} from 'react';\nimport {Swipeable,TouchableOpacity} from 'react-native-gesture-handler';\n\nexport type ChatListItemProps = {\n  chatRoom: ChatRoom;\n  \n}\n\nconst ChatListItem = (props: ChatListItemProps) => {\n  const { chatRoom } = props;\n  \n  const [otherUser,setOtherUser] = useState(null);\n  const[newMessage,setNewMessage] = useState(false);\n  \n  const navigation = useNavigation();\n  \n  const user = chatRoom.chatRoomUsers.items[1].user;\n\n  useEffect (() =>{\n    const getOtherUser = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      if(chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub){\n        setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n      }else{\n        setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n      }\n      \n    }\n  \n    getOtherUser();\n  },[])\n\n  const onClick = () => {\n    navigation.navigate(\"ChatRoom\", {\n      id: chatRoom.id,\n      name: user.name,\n    })\n  }\n  if(!otherUser){\n    return null;\n  }\n  const renderRightActions = (\n    progress: Animated.AnimatedInterpolation,\n    dragX: Animated.AnimatedInterpolation,\n  ) => {\n    const opacity = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [1, 0],\n      extrapolate: 'clamp',\n    });\n  \n    return (\n      <View style={styles.swipedRow}>\n        <View style={styles.swipedConfirmationContainer}>\n          <Text style={styles.deleteConfirmationText}>Are you sure?</Text>\n        </View>\n        <Animated.View style={[styles.deleteButton, {opacity}]}>\n          <TouchableOpacity>\n            <Text style={styles.deleteButtonText}>Delete</Text>\n          </TouchableOpacity>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  return (\n    <TouchableWithoutFeedback onPress={onClick}>\n     <Swipeable renderRightActions={renderRightActions}>\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n       \n          <Image source={{ uri: otherUser.imageUri }} style={styles.avatar}/>\n\n          <View style={styles.midContainer} >\n            <Text style={styles.username}>{otherUser.name}</Text>\n            <Text numberOfLines={2} style={styles.lastMessage}>{chatRoom.lastMessage ? `${chatRoom.lastMessage.user.name}: ${chatRoom.lastMessage.content}` : \"none\"}</Text>\n          </View>\n\n        </View>\n\n        <Text style={styles.time}>\n          {chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")}\n        </Text>\n      </View>\n      </Swipeable>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default ChatListItem;"]},"metadata":{},"sourceType":"module"}