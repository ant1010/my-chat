{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { useState } from 'react';\nimport styles from \"./styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\nimport { createChatRoom, createChatRoomUser } from \"../../src/graphql/mutations\";\nimport { getUser } from \"../../screens/queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ContactListItem = function ContactListItem(props) {\n  var user = props.user;\n\n  var _useState = useState([]),\n      foundChatRoomID = _useState.foundChatRoomID,\n      setFoundChatRoomID = _useState.setFoundChatRoomID;\n\n  var findDuplicate = function findDuplicate() {\n    var userInfo, currUser, currUserInfo, user1, user2, result;\n    return _regeneratorRuntime.async(function findDuplicate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: user.id\n            })));\n\n          case 2:\n            userInfo = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 5:\n            currUser = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: currUser.attributes.sub\n            })));\n\n          case 8:\n            currUserInfo = _context.sent;\n            user1 = userInfo.data.getUser.chatRoomUser.items;\n            user2 = currUserInfo.data.getUser.chatRoomUser.items;\n            result = user1.filter(function (o1) {\n              return user2.some(function (o3) {\n                return o1.chatRoomID === o3.chatRoomID;\n              });\n            });\n\n            if (!(result[0] != null)) {\n              _context.next = 15;\n              break;\n            }\n\n            setFoundChatRoomID(result.chatRoomID);\n            return _context.abrupt(\"return\", result);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  findDuplicate();\n  var navigation = useNavigation();\n\n  var onClick = function onClick() {\n    var chatRoomFound, newChatRoomData, newChatRoom, room, userInfo;\n    return _regeneratorRuntime.async(function onClick$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            chatRoomFound = findDuplicate();\n\n            if (!true) {\n              _context2.next = 5;\n              break;\n            }\n\n            console.log(findDuplicate());\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChatRoom, {\n              input: {}\n            })));\n\n          case 7:\n            newChatRoomData = _context2.sent;\n\n            if (newChatRoomData.data) {\n              _context2.next = 11;\n              break;\n            }\n\n            console.log(\"Failed to create a chat room\");\n            return _context2.abrupt(\"return\");\n\n          case 11:\n            newChatRoom = newChatRoomData.data.createChatRoom;\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChatRoomUser, {\n              input: {\n                userID: user.id,\n                chatRoomID: newChatRoom.id\n              }\n            })));\n\n          case 14:\n            room = _context2.sent;\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 17:\n            userInfo = _context2.sent;\n            _context2.next = 20;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChatRoomUser, {\n              input: {\n                userID: userInfo.attributes.sub,\n                chatRoomID: newChatRoom.id\n              }\n            })));\n\n          case 20:\n            navigation.navigate('ChatRoom', {\n              id: newChatRoom.id,\n              name: \"Harcoded name\"\n            });\n            _context2.next = 26;\n            break;\n\n          case 23:\n            _context2.prev = 23;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 23]], Promise);\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: onClick,\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.lefContainer,\n        children: [_jsx(Image, {\n          source: {\n            uri: user.imageUri\n          },\n          style: styles.avatar\n        }), _jsx(View, {\n          style: styles.midContainer,\n          children: _jsx(Text, {\n            style: styles.username,\n            children: user.name\n          })\n        })]\n      })\n    })\n  });\n};\n\nexport default ContactListItem;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/ContactListItem/index.tsx"],"names":["React","useState","styles","useNavigation","API","graphqlOperation","Auth","createChatRoom","createChatRoomUser","getUser","ContactListItem","props","user","foundChatRoomID","setFoundChatRoomID","findDuplicate","graphql","id","userInfo","currentAuthenticatedUser","currUser","attributes","sub","currUserInfo","user1","data","chatRoomUser","items","user2","result","filter","o1","some","o3","chatRoomID","navigation","onClick","chatRoomFound","console","log","input","newChatRoomData","newChatRoom","userID","room","navigate","name","container","lefContainer","uri","imageUri","avatar","midContainer","username"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback,\n \n} from \"react-native\";\nimport {useEffect,useState} from 'react';\nimport { User } from \"../../types\";\nimport styles from \"./styles\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {API,graphqlOperation,Auth} from \"aws-amplify\";\nimport {createChatRoom, createChatRoomUser} from \"../../src/graphql/mutations\"\nimport { getUser } from '../../screens/queries';\n\nexport type ContactListItemProps = {\n  user: User;\n}\n\nconst ContactListItem = (props: ContactListItemProps) => {\n  const { user } = props;\n  const {foundChatRoomID,setFoundChatRoomID} = useState([]);\n \n  \n    const findDuplicate = async () => {\n      const userInfo = await API.graphql(graphqlOperation(getUser,{id:user.id}));\n      const currUser = await Auth.currentAuthenticatedUser();\n      const currUserInfo = await API.graphql(graphqlOperation(getUser,{id:currUser.attributes.sub}));\n      const user1 = userInfo.data.getUser.chatRoomUser.items;\n      const user2 = currUserInfo.data.getUser.chatRoomUser.items;\n      \n      var result = user1.filter(function(o1){\n        \n        return user2.some(function(o3){\n          \n            return o1.chatRoomID === o3.chatRoomID;          \n        }); })\n       if(result[0] != null){\n         setFoundChatRoomID(result.chatRoomID);\n        return result;\n       }\n    }\n    \n    findDuplicate();\n   \n  \n  const navigation = useNavigation();\n\n  const onClick = async() => {\n   // navigate to chat room with this user\n     try{\n       const chatRoomFound = findDuplicate();\n       \n        if(true){\n          console.log(findDuplicate());\n          return;\n        }\n        const newChatRoomData = await API.graphql(graphqlOperation(createChatRoom,{input:{}}))\n        if(!newChatRoomData.data){\n            console.log(\"Failed to create a chat room\");\n            return;\n        }\n        const newChatRoom = newChatRoomData.data.createChatRoom;\n        \n        const room = await API.graphql(graphqlOperation(createChatRoomUser,{input:{userID: user.id,chatRoomID:newChatRoom.id}}));\n        \n        const userInfo = await Auth.currentAuthenticatedUser();\n        await API.graphql(graphqlOperation(createChatRoomUser,{input:{userID: userInfo.attributes.sub,chatRoomID:newChatRoom.id}}));\n        \n        navigation.navigate('ChatRoom', {\n            id: newChatRoom.id,\n            name: \"Harcoded name\",\n          })\n     }catch(e){\n         console.log(e);\n     }\n  }\n\n  return (\n    <TouchableWithoutFeedback onPress={onClick}>\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n          <Image source={{ uri: user.imageUri }} style={styles.avatar}/>\n\n          <View style={styles.midContainer}>\n            <Text style={styles.username}>{user.name}</Text>\n            {/*<Text numberOfLines={2} style={styles.status}>{user.status}</Text>*/}\n          </View>\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default ContactListItem;"]},"metadata":{},"sourceType":"module"}