{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport EventListItem from \"../components/EventListItem\";\nimport { useEffect, useState } from 'react';\nimport NewEventButton from \"../components/NewEventButton\";\nimport { getUser } from \"./queries\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar wait = function wait(timeout) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, timeout);\n  });\n};\n\nexport default function EventsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventRooms = _useState2[0],\n      setEventRooms = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      key = _useState4[0],\n      setKey = _useState4[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    wait(2000).then(function () {\n      return setRefreshing(false);\n    });\n  }, []);\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData, rooms, listevents;\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            userInfo = _context.sent;\n            console.log(userInfo);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 7:\n            userData = _context.sent;\n            rooms = userData.data.getUser.eventUser.items;\n            listevents = [];\n            rooms.map(function (event) {\n              listevents = listevents.concat(event.eventRoom.events.items);\n            });\n            setEventRooms(listevents);\n            console.log(listevents);\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  useEffect(function () {\n    fetchChatRooms();\n    ;\n  }, [refreshing]);\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsxs(ScrollView, {\n      contentContainerStyle: styles.scrollview,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh\n      }),\n      children: [_jsx(FlatList, {\n        style: {\n          width: '100%'\n        },\n        data: eventRooms,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsx(EventListItem, {\n            event: item\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.eventTime;\n        }\n      }), _jsx(NewEventButton, {})]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  scrollview: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/EventsScreen.tsx"],"names":["React","EventListItem","useEffect","useState","NewEventButton","getUser","API","graphqlOperation","Auth","wait","timeout","Promise","resolve","setTimeout","EventsScreen","eventRooms","setEventRooms","key","setKey","refreshing","setRefreshing","onRefresh","useCallback","then","fetchChatRooms","currentAuthenticatedUser","userInfo","console","log","graphql","id","attributes","sub","userData","rooms","data","eventUser","items","listevents","map","event","concat","eventRoom","events","styles","container","scrollview","width","item","eventTime","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {RefreshControl, SafeAreaView,Text, ScrollView,FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport EventListItem from '../components/EventListItem';\nimport {listEvents} from '../src/graphql/queries';\nimport {useEffect,useState} from 'react';\nimport NewEventButton from \"../components/NewEventButton\";\nimport InputBox from \"../components/InputBox\";\nimport {getUser} from './queries';\nimport {\n  API,\n  graphqlOperation,\n  Auth,\n\n}from 'aws-amplify';\n\nconst wait = (timeout) => {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n}\n\nexport default function EventsScreen() {\n    // const [events,setEvents] = useState([]);\n    // useEffect(() => {\n    //     const fetchUsers = async () => {\n    //         try{\n    //             const userData = await API.graphql(graphqlOperation(listEvents));\n    //             console.log(userData);\n    //             setEvents(userData.data.listEvents.items);\n    //         }catch(e){\n    //             console.log(e);\n    //         }\n    //     }\n    //    fetchUsers();\n    // }, [])\n    const [eventRooms,setEventRooms] = useState([]);\n    const [key, setKey] = useState(false);\n    const [refreshing, setRefreshing] = React.useState(false);\n\n    const onRefresh = React.useCallback(() => {\n      setRefreshing(true);\n      wait(2000).then(() => setRefreshing(false));\n    }, []);\n  \n    const fetchChatRooms = async () => {\n        try{\n            const userInfo = await Auth.currentAuthenticatedUser();\n            console.log(userInfo);\n            const userData = await API.graphql(\n                graphqlOperation(\n                    getUser, {\n                        id: userInfo.attributes.sub,\n                    }\n                )\n            )\n            const rooms = userData.data.getUser.eventUser.items;\n            let listevents = [];\n            rooms.map((event) => {listevents = listevents.concat(event.eventRoom.events.items)})\n            \n            setEventRooms(listevents);\n            \n            console.log(listevents);\n        }catch(e){\n            console.log(e);\n        }\n        \n   }\n   useEffect(() => {\n         \n    fetchChatRooms();\n    \n; }, [refreshing])\n\n  return (\n    <SafeAreaView style={styles.container}>\n    <ScrollView\n      contentContainerStyle={styles.scrollview}\n      refreshControl={\n        <RefreshControl\n          refreshing={refreshing}\n          onRefresh={onRefresh}\n        />\n      }\n    >\n      <FlatList\n        style={{width: '100%'}}\n        data={eventRooms}\n        renderItem={({ item }) => <EventListItem  event={item} />}\n        keyExtractor={(item) => item.eventTime}\n      \n      />\n      <NewEventButton/>\n      </ScrollView>\n    </SafeAreaView >\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  scrollview: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container:{\n    flex:1,\n  }\n});"]},"metadata":{},"sourceType":"module"}