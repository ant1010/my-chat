{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport ChatListItem from \"../components/ChatListItem\";\nimport { useEffect, useState } from \"react\";\nimport NewMessageButton from \"../components/NewMessageButton\";\nimport { onCreateMessage } from \"../src/graphql/subscriptions\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { getUser } from \"./queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChatsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chatRooms = _useState2[0],\n      setChatRooms = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      key = _useState4[0],\n      setKey = _useState4[1];\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData;\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            userInfo = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 6:\n            userData = _context.sent;\n            setChatRooms(userData.data.getUser.chatRoomUser.items);\n            console.log(userData.data.getUser.chatRoomUser.items);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  useEffect(function () {\n    fetchChatRooms();\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n        console.log(newMessage);\n        console.log(data);\n        setKey(function (current) {\n          return !current;\n        });\n        fetchChatRooms();\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      style: {\n        width: '100%'\n      },\n      data: chatRooms,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ChatListItem, {\n          chatRoom: item.chatRoom\n        }, key);\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      extraData: key\n    }), _jsx(NewMessageButton, {})]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ChatsScreen.tsx"],"names":["React","View","ChatListItem","useEffect","useState","NewMessageButton","onCreateMessage","API","graphqlOperation","Auth","getUser","ChatsScreen","chatRooms","setChatRooms","key","setKey","fetchChatRooms","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","data","chatRoomUser","items","console","log","subscription","subscribe","next","newMessage","value","current","unsubscribe","styles","container","width","item","chatRoom","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport ChatListItem from '../components/ChatListItem';\nimport {useEffect,useState} from \"react\";\nimport NewMessageButton from \"../components/NewMessageButton\";\nimport {onCreateMessage} from '../src/graphql/subscriptions';\nimport {\n    API,\n    graphqlOperation,\n    Auth,\n\n}from 'aws-amplify';\nimport {getUser} from './queries';\n\n\nexport default function ChatsScreen() {\n    const [chatRooms,setChatRooms] = useState([]);\n    const [key, setKey] = useState(false);\n\n\n    const fetchChatRooms = async () => {\n        try{\n            const userInfo = await Auth.currentAuthenticatedUser();\n            \n            const userData = await API.graphql(\n                graphqlOperation(\n                    getUser, {\n                        id: userInfo.attributes.sub,\n                    }\n                )\n            )\n        \n            setChatRooms(userData.data.getUser.chatRoomUser.items);\n            \n            console.log(userData.data.getUser.chatRoomUser.items);\n        }catch(e){\n            console.log(e);\n        }\n        \n   }\n\n    useEffect(() => {\n         \n        \n\n        fetchChatRooms();\n        \n     }, [])\n     useEffect(() =>{\n        const subscription = API.graphql(\n          graphqlOperation(onCreateMessage)).subscribe({next:(data) => {\n            const newMessage = data.value.data.onCreateMessage;\n            console.log(newMessage);\n            \n           \n             console.log(data)\n             setKey(current=>!current);\n             fetchChatRooms();\n      \n           \n            \n          }})\n          return () => subscription.unsubscribe();\n        },[])\n    \n     \n    \n  return (\n    <View style={styles.container}>\n    \n      <FlatList\n        style={{width: '100%'}}\n        data={chatRooms}\n        renderItem={({ item }) => <ChatListItem key = {key}chatRoom={item.chatRoom}/>}\n        keyExtractor={(item) => item.id}\n        extraData = {key}\n      />\n      <NewMessageButton />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n});"]},"metadata":{},"sourceType":"module"}