{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport EventListItem from \"../components/EventListItem\";\nimport { useEffect, useState } from 'react';\nimport NewEventButton from \"../components/NewEventButton\";\nimport { getUser } from \"./queries\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function EventsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventRooms = _useState2[0],\n      setEventRooms = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      key = _useState4[0],\n      setKey = _useState4[1];\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData;\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            userInfo = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 6:\n            userData = _context.sent;\n            setEventRooms(userData.data.getUser.eventUser.items);\n            console.log(userData.data);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  useEffect(function () {\n    fetchChatRooms();\n    ;\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      style: {\n        width: '100%'\n      },\n      data: eventRooms,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(EventListItem, {\n          event: item.eventRoom\n        }, key);\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      extraData: key\n    }), _jsx(NewEventButton, {})]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/EventsScreen.tsx"],"names":["React","View","EventListItem","useEffect","useState","NewEventButton","getUser","API","graphqlOperation","Auth","EventsScreen","eventRooms","setEventRooms","key","setKey","fetchChatRooms","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","data","eventUser","items","console","log","styles","container","width","item","eventRoom","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,IAAT;AACA,OAAOC,aAAP;AAEA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,OAAOC,cAAP;AAEA,SAAQC,OAAR;AACA,SACEC,GADF,EAEEC,gBAFF,EAGEC,IAHF,QAKM,aALN;;;AAMA,eAAe,SAASC,YAAT,GAAwB;AAcnC,kBAAmCN,QAAQ,CAAC,EAAD,CAA3C;AAAA;AAAA,MAAOO,UAAP;AAAA,MAAkBC,aAAlB;;AACA,mBAAsBR,QAAQ,CAAC,KAAD,CAA9B;AAAA;AAAA,MAAOS,GAAP;AAAA,MAAYC,MAAZ;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEQN,IAAI,CAACO,wBAAL,EAFR;;AAAA;AAETC,YAAAA,QAFS;AAAA;AAAA,6CAIQV,GAAG,CAACW,OAAJ,CACnBV,gBAAgB,CACZF,OADY,EACH;AACLa,cAAAA,EAAE,EAAEF,QAAQ,CAACG,UAAT,CAAoBC;AADnB,aADG,CADG,CAJR;;AAAA;AAITC,YAAAA,QAJS;AAYfV,YAAAA,aAAa,CAACU,QAAQ,CAACC,IAAT,CAAcjB,OAAd,CAAsBkB,SAAtB,CAAgCC,KAAjC,CAAb;AAEAC,YAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACC,IAArB;AAde;AAAA;;AAAA;AAAA;AAAA;AAgBfG,YAAAA,OAAO,CAACC,GAAR;;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAoBDxB,EAAAA,SAAS,CAAC,YAAM;AAEfY,IAAAA,cAAc;AAElB;AAAG,GAJS,EAIP,EAJO,CAAT;AAMD,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,QAAD;AACE,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OADT;AAEE,MAAA,IAAI,EAAEnB,UAFR;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGoB,IAAH,QAAGA,IAAH;AAAA,eAAc,KAAC,aAAD;AAA0B,UAAA,KAAK,EAAEA,IAAI,CAACC;AAAtC,WAAqBnB,GAArB,CAAd;AAAA,OAHd;AAIE,MAAA,YAAY,EAAE,sBAACkB,IAAD;AAAA,eAAUA,IAAI,CAACZ,EAAf;AAAA,OAJhB;AAKE,MAAA,SAAS,EAAIN;AALf,MADF,EAQE,KAAC,cAAD,KARF;AAAA,IADF;AAaD;AAED,IAAMe,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport EventListItem from '../components/EventListItem';\nimport {listEvents} from '../src/graphql/queries';\nimport {useEffect,useState} from 'react';\nimport NewEventButton from \"../components/NewEventButton\";\nimport InputBox from \"../components/InputBox\";\nimport {getUser} from './queries';\nimport {\n  API,\n  graphqlOperation,\n  Auth,\n\n}from 'aws-amplify';\nexport default function EventsScreen() {\n    // const [events,setEvents] = useState([]);\n    // useEffect(() => {\n    //     const fetchUsers = async () => {\n    //         try{\n    //             const userData = await API.graphql(graphqlOperation(listEvents));\n    //             console.log(userData);\n    //             setEvents(userData.data.listEvents.items);\n    //         }catch(e){\n    //             console.log(e);\n    //         }\n    //     }\n    //    fetchUsers();\n    // }, [])\n    const [eventRooms,setEventRooms] = useState([]);\n    const [key, setKey] = useState(false);\n\n\n    const fetchChatRooms = async () => {\n        try{\n            const userInfo = await Auth.currentAuthenticatedUser();\n            \n            const userData = await API.graphql(\n                graphqlOperation(\n                    getUser, {\n                        id: userInfo.attributes.sub,\n                    }\n                )\n            )\n        \n            setEventRooms(userData.data.getUser.eventUser.items);\n            \n            console.log(userData.data);\n        }catch(e){\n            console.log(e);\n        }\n        \n   }\n   useEffect(() => {\n         \n    fetchChatRooms();\n    \n; }, [])\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        style={{width: '100%'}}\n        data={eventRooms}\n        renderItem={({ item }) => <EventListItem key ={key} event={item.eventRoom} />}\n        keyExtractor={(item) => item.id}\n        extraData = {key}\n      />\n      <NewEventButton/>\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}