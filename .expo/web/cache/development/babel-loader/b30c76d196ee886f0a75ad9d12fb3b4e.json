{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport EventInput from \"../components/EventInput\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { getUser } from \"../src/graphql/queries\";\nimport { useEffect, useState } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function EventsScreen() {\n  var route = useRoute();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      event = _useState2[0],\n      setEvent = _useState2[1];\n\n  useEffect(function () {\n    console.log(event);\n  }, [event]);\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData, rooms, listevents;\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            userInfo = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 6:\n            userData = _context.sent;\n            rooms = userData.data.getUser.eventUser.items;\n            listevents = [];\n            rooms.map(function (event) {\n              listevents = listevents.concat(event.eventRoom.events.items);\n            });\n            console.log(rooms);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(EventInput, {\n      postEvent: setEvent\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/EventCreation.tsx"],"names":["React","View","EventInput","API","graphqlOperation","Auth","getUser","useEffect","useState","useRoute","EventsScreen","route","event","setEvent","console","log","fetchChatRooms","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","rooms","data","eventUser","items","listevents","map","concat","eventRoom","events","styles","container","StyleSheet","create","flex","alignItems","color"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,IAAT;AAEA,OAAOC,UAAP;AACA,SAAQC,GAAR,EAAYC,gBAAZ,EAA6BC,IAA7B,QAAwC,aAAxC;AACA,SAAQC,OAAR;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;;AACA,eAAe,SAASC,YAAT,GAAwB;AACnC,MAAMC,KAAK,GAAGF,QAAQ,EAAtB;;AACA,kBAAyBD,QAAQ,CAAC,EAAD,CAAjC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAaC,QAAb;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEH,GAHQ,EAGP,CAACA,KAAD,CAHO,CAAT;;AAIA,MAAMI,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAMMX,IAAI,CAACY,wBAAL,EANN;;AAAA;AAMXC,YAAAA,QANW;AAAA;AAAA,6CAQMf,GAAG,CAACgB,OAAJ,CACnBf,gBAAgB,CACZE,OADY,EACH;AACLc,cAAAA,EAAE,EAAEF,QAAQ,CAACG,UAAT,CAAoBC;AADnB,aADG,CADG,CARN;;AAAA;AAQXC,YAAAA,QARW;AAeXC,YAAAA,KAfW,GAeHD,QAAQ,CAACE,IAAT,CAAcnB,OAAd,CAAsBoB,SAAtB,CAAgCC,KAf7B;AAgBbC,YAAAA,UAhBa,GAgBA,EAhBA;AAiBjBJ,YAAAA,KAAK,CAACK,GAAN,CAAU,UAACjB,KAAD,EAAW;AAACgB,cAAAA,UAAU,GAAGA,UAAU,CAACE,MAAX,CAAkBlB,KAAK,CAACmB,SAAN,CAAgBC,MAAhB,CAAuBL,KAAzC,CAAb;AAA6D,aAAnF;AAIAb,YAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AArBiB;AAAA;;AAAA;AAAA;AAAA;AAuBjBV,YAAAA,OAAO,CAACC,GAAR;;AAvBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AA6BF,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEkB,MAAM,CAACC,SAApB;AAAA,cAEC,KAAC,UAAD;AAAY,MAAA,SAAS,EAAIrB;AAAzB;AAFD,IADF;AAOD;AAED,IAAMoB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,KAAK,EAAC;AAHG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet,Text} from 'react-native';\nimport { View } from '../components/Themed';\nimport EventListItem from '../components/EventListItem';\nimport EventInput from '../components/EventInput';\nimport {API,graphqlOperation,Auth} from 'aws-amplify';\nimport {getUser} from '../src/graphql/queries';\nimport {useEffect,useState} from 'react';\nimport { useRoute } from '@react-navigation/native';\nexport default function EventsScreen() {\n    const route = useRoute();\n    const [event,setEvent] = useState([]);\n    useEffect(() => {\n        console.log(event);\n        //fetchChatRooms();\n    },[event]);\n    const fetchChatRooms = async () => {\n      try{\n\n        //pull data-->loop thru eventRooms comparing new event invites--> \n        //if no group exists then create new group along with n eventUsers, else create event with \n        //said group.\n          const userInfo = await Auth.currentAuthenticatedUser();\n          \n          const userData = await API.graphql(\n              graphqlOperation(\n                  getUser, {\n                      id: userInfo.attributes.sub,\n                  }\n              )\n          )\n          const rooms = userData.data.getUser.eventUser.items;\n          let listevents = [];\n          rooms.map((event) => {listevents = listevents.concat(event.eventRoom.events.items)})\n          \n         // setEventRooms(listevents);\n          \n          console.log(rooms);\n      }catch(e){\n          console.log(e);\n      }\n      \n }\n \n\n  return (\n    <View style={styles.container}>\n    \n     <EventInput postEvent = {setEvent}/>\n    \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    color:'white',\n    \n  },\n});"]},"metadata":{},"sourceType":"module"}