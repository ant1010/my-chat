{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport EventListItem from \"../components/EventListItem\";\nimport { listEvents, getUser } from \"../src/graphql/queries\";\nimport { useEffect, useState } from 'react';\nimport NewEventButton from \"../components/NewEventButton\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function EventsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  useEffect(function () {\n    var fetchUsers = function fetchUsers() {\n      var userData;\n      return _regeneratorRuntime.async(function fetchUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(listEvents)));\n\n            case 3:\n              userData = _context.sent;\n              console.log(userData);\n              setEvents(userData.data.listEvents.items);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    fetchUsers();\n  }, []);\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      eventRooms = _useState4[0],\n      setEventRooms = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      key = _useState6[0],\n      setKey = _useState6[1];\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData;\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            userInfo = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 6:\n            userData = _context2.sent;\n            setEventRooms(userData.data.getUser.eventUser);\n            console.log(userData.data);\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  useEffect(function () {\n    fetchChatRooms();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      style: {\n        width: '100%'\n      },\n      data: events,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(EventListItem, {\n          event: item\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    }), _jsx(NewEventButton, {})]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/EventsScreen.tsx"],"names":["React","View","EventListItem","listEvents","getUser","useEffect","useState","NewEventButton","API","graphqlOperation","Auth","EventsScreen","events","setEvents","fetchUsers","graphql","userData","console","log","data","items","eventRooms","setEventRooms","key","setKey","fetchChatRooms","currentAuthenticatedUser","userInfo","id","attributes","sub","eventUser","styles","container","width","item","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,IAAT;AACA,OAAOC,aAAP;AACA,SAAQC,UAAR,EAAmBC,OAAnB;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,OAAOC,cAAP;AAEA,SACEC,GADF,EAEEC,gBAFF,EAGEC,IAHF,QAKM,aALN;;;AAMA,eAAe,SAASC,YAAT,GAAwB;AACnC,kBAA2BL,QAAQ,CAAC,EAAD,CAAnC;AAAA;AAAA,MAAOM,MAAP;AAAA,MAAcC,SAAd;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMS,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEYN,GAAG,CAACO,OAAJ,CAAYN,gBAAgB,CAACN,UAAD,CAA5B,CAFZ;;AAAA;AAELa,cAAAA,QAFK;AAGXC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,cAAAA,SAAS,CAACG,QAAQ,CAACG,IAAT,CAAchB,UAAd,CAAyBiB,KAA1B,CAAT;AAJW;AAAA;;AAAA;AAAA;AAAA;AAMXH,cAAAA,OAAO,CAACC,GAAR;;AANW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AASDJ,IAAAA,UAAU;AACZ,GAXQ,EAWN,EAXM,CAAT;;AAYA,mBAAmCR,QAAQ,CAAC,EAAD,CAA3C;AAAA;AAAA,MAAOe,UAAP;AAAA,MAAkBC,aAAlB;;AACA,mBAAsBhB,QAAQ,CAAC,KAAD,CAA9B;AAAA;AAAA,MAAOiB,GAAP;AAAA,MAAYC,MAAZ;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEQf,IAAI,CAACgB,wBAAL,EAFR;;AAAA;AAETC,YAAAA,QAFS;AAAA;AAAA,6CAIQnB,GAAG,CAACO,OAAJ,CACnBN,gBAAgB,CACZL,OADY,EACH;AACLwB,cAAAA,EAAE,EAAED,QAAQ,CAACE,UAAT,CAAoBC;AADnB,aADG,CADG,CAJR;;AAAA;AAITd,YAAAA,QAJS;AAYfM,YAAAA,aAAa,CAACN,QAAQ,CAACG,IAAT,CAAcf,OAAd,CAAsB2B,SAAvB,CAAb;AAEAd,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AAde;AAAA;;AAAA;AAAA;AAAA;AAgBfF,YAAAA,OAAO,CAACC,GAAR;;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAoBDb,EAAAA,SAAS,CAAC,YAAM;AAEfoB,IAAAA,cAAc;AAEhB,GAJU,EAIR,EAJQ,CAAT;AAKD,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEO,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,QAAD;AACE,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OADT;AAEE,MAAA,IAAI,EAAEtB,MAFR;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGuB,IAAH,QAAGA,IAAH;AAAA,eAAc,KAAC,aAAD;AAAe,UAAA,KAAK,EAAEA;AAAtB,UAAd;AAAA,OAHd;AAIE,MAAA,YAAY,EAAE,sBAACA,IAAD;AAAA,eAAUA,IAAI,CAACP,EAAf;AAAA;AAJhB,MADF,EAOE,KAAC,cAAD,KAPF;AAAA,IADF;AAYD;AAED,IAAMI,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport EventListItem from '../components/EventListItem';\nimport {listEvents,getUser} from '../src/graphql/queries';\nimport {useEffect,useState} from 'react';\nimport NewEventButton from \"../components/NewEventButton\";\nimport InputBox from \"../components/InputBox\";\nimport {\n  API,\n  graphqlOperation,\n  Auth,\n\n}from 'aws-amplify';\nexport default function EventsScreen() {\n    const [events,setEvents] = useState([]);\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try{\n                const userData = await API.graphql(graphqlOperation(listEvents));\n                console.log(userData);\n                setEvents(userData.data.listEvents.items);\n            }catch(e){\n                console.log(e);\n            }\n        }\n       fetchUsers();\n    }, [])\n    const [eventRooms,setEventRooms] = useState([]);\n    const [key, setKey] = useState(false);\n\n\n    const fetchChatRooms = async () => {\n        try{\n            const userInfo = await Auth.currentAuthenticatedUser();\n            \n            const userData = await API.graphql(\n                graphqlOperation(\n                    getUser, {\n                        id: userInfo.attributes.sub,\n                    }\n                )\n            )\n        \n            setEventRooms(userData.data.getUser.eventUser);\n            \n            console.log(userData.data);\n        }catch(e){\n            console.log(e);\n        }\n        \n   }\n   useEffect(() => {\n         \n    fetchChatRooms();\n    \n }, [])\n  return (\n    <View style={styles.container}>\n      <FlatList\n        style={{width: '100%'}}\n        data={events}\n        renderItem={({ item }) => <EventListItem event={item} />}\n        keyExtractor={(item) => item.id}\n      />\n      <NewEventButton/>\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}