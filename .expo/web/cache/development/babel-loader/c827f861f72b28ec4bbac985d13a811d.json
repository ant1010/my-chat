{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useRoute } from '@react-navigation/native';\nimport ChatMessage from \"../components/ChatMesage\";\nimport { useEffect, useState } from 'react';\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\nimport InputBox from \"../components/InputBox\";\nimport { messagesByChatRoom } from \"../src/graphql/queries\";\nimport { onCreateMessage } from \"../src/graphql/subscriptions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myId = _useState4[0],\n      setMyId = _useState4[1];\n\n  var route = useRoute();\n\n  var fetchMessages = function fetchMessages() {\n    var messageData;\n    return _regeneratorRuntime.async(function fetchMessages$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(messagesByChatRoom, {\n              chatRoomID: route.params.id,\n              sortDirection: \"DESC\"\n            })));\n\n          case 2:\n            messageData = _context.sent;\n            console.log(messageData.data.messagesByChatRoom.items);\n            setMessages(messageData.data.messagesByChatRoom.items);\n            console.log(messages);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchMessages();\n  }, []);\n  useEffect(function () {\n    var getMyId = function getMyId() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getMyId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context2.sent;\n              setMyId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getMyId();\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n        console.log(data.value.data);\n\n        if (newMessage.chatRoomID !== route.params.id) {\n          return;\n        }\n\n        fetchMessages;\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n  return _jsxs(View, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [_jsx(FlatList, {\n      data: messages,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ChatMessage, {\n          myId: myId,\n          message: item\n        });\n      },\n      inverted: true\n    }), _jsx(InputBox, {\n      chatRoomID: route.params.id\n    })]\n  });\n};\n\nexport default ChatRoomScreen;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ChatRoomScreen.tsx"],"names":["React","useRoute","ChatMessage","useEffect","useState","API","Auth","graphqlOperation","InputBox","messagesByChatRoom","onCreateMessage","ChatRoomScreen","messages","setMessages","myId","setMyId","route","fetchMessages","graphql","chatRoomID","params","id","sortDirection","messageData","console","log","data","items","getMyId","currentAuthenticatedUser","userInfo","attributes","sub","subscription","subscribe","next","newMessage","value","unsubscribe","width","height","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {FlatList, Text, ImageBackground ,View} from 'react-native';\n\nimport { useRoute } from '@react-navigation/native';\n\nimport chatRoomData from '../data/Chats';\nimport ChatMessage from \"../components/ChatMesage\";\nimport {useEffect,useState} from 'react';\nimport {API,Auth,graphqlOperation} from 'aws-amplify';\nimport InputBox from \"../components/InputBox\";\nimport {messagesByChatRoom} from '../src/graphql/queries';\nimport {onCreateMessage} from '../src/graphql/subscriptions';\nconst ChatRoomScreen = () => {\n  const [messages,setMessages] = useState([]);\n  const [myId, setMyId] = useState(null);\n  const route = useRoute();\n\n  // console.log(route.params)\n  \n    const fetchMessages = async () => {\n      const messageData = await API.graphql(graphqlOperation(messagesByChatRoom,{chatRoomID:route.params.id,sortDirection:\"DESC\"}))\n      console.log(messageData.data.messagesByChatRoom.items);\n      setMessages(messageData.data.messagesByChatRoom.items);\n      console.log(messages);\n    }\n    useEffect(() => {\n                    // note mutable flag\n  fetchMessages()\n   \n  },[])\n\n    useEffect(() => {\n    const getMyId = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      setMyId(userInfo.attributes.sub);\n    }\n    getMyId();\n  }, [])  \n\n    useEffect(() =>{\n      const subscription = API.graphql(\n        graphqlOperation(onCreateMessage)).subscribe({next:(data) => {\n          const newMessage = data.value.data.onCreateMessage;\n          console.log(data.value.data);\n          if(newMessage.chatRoomID !== route.params.id){\n            return;\n          }\n\n          // console.log(data)\n          // setMessages([newMessage, ...messages]);\n          fetchMessages\n        }})\n      \n      return () => subscription.unsubscribe();\n    },[])\n  return (\n    <View style={{width: '100%', height: '100%'}} >\n    \n      <FlatList\n        data={messages}\n        renderItem={({ item }) => <ChatMessage myId = {myId} message={item} />}\n        inverted\n      />\n\n      <InputBox chatRoomID = {route.params.id} />\n    </View>\n  );\n}\n\nexport default ChatRoomScreen;"]},"metadata":{},"sourceType":"module"}