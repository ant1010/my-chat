{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { useEffect, useState } from 'react';\nimport { onCreateMessage } from \"../../src/graphql/subscriptions\";\nimport { updateChatRoom } from \"../../src/graphql/mutations\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatListItem = function ChatListItem(props) {\n  var chatRoom = props.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      otherUser = _useState2[0],\n      setOtherUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newMessage = _useState4[0],\n      setNewMessage = _useState4[1];\n\n  var navigation = useNavigation();\n  var user = chatRoom.chatRoomUsers.items[1].user;\n  useEffect(function () {\n    var getOtherUser = function getOtherUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getOtherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n\n              if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\n                setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n              } else {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getOtherUser();\n  }, []);\n  console.log(chatRoom);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n        console.log(newMessage.id);\n        console.log(data);\n        setNewMessage(function (current) {\n          return !current;\n        });\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n\n  var updateChatRoomLastMessage = function updateChatRoomLastMessage(messageId) {\n    return _regeneratorRuntime.async(function updateChatRoomLastMessage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(updateChatRoom, {\n              input: {\n                id: chatRoomID,\n                lastMessageID: messageId\n              }\n            })));\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var onClick = function onClick() {\n    navigation.navigate(\"ChatRoom\", {\n      id: chatRoom.id,\n      name: user.name\n    });\n  };\n\n  if (!otherUser) {\n    return null;\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: onClick,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.lefContainer,\n        children: [_jsx(Image, {\n          source: {\n            uri: otherUser.imageUri\n          },\n          style: styles.avatar\n        }), _jsxs(View, {\n          style: styles.midContainer,\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: otherUser.name\n          }), _jsx(Text, {\n            numberOfLines: 2,\n            style: styles.lastMessage,\n            children: chatRoom.lastMessage ? chatRoom.lastMessage.user.name + \": \" + chatRoom.lastMessage.content : \"none\"\n          })]\n        })]\n      }), _jsx(Text, {\n        style: styles.time,\n        children: chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")\n      })]\n    })\n  });\n};\n\nexport default ChatListItem;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/ChatListItem/index.tsx"],"names":["React","styles","moment","useNavigation","API","graphqlOperation","Auth","useEffect","useState","onCreateMessage","updateChatRoom","ChatListItem","props","chatRoom","otherUser","setOtherUser","newMessage","setNewMessage","navigation","user","chatRoomUsers","items","getOtherUser","currentAuthenticatedUser","userInfo","id","attributes","sub","console","log","subscription","graphql","subscribe","next","data","value","current","unsubscribe","updateChatRoomLastMessage","messageId","input","chatRoomID","lastMessageID","onClick","navigate","name","container","lefContainer","uri","imageUri","avatar","midContainer","username","lastMessage","content","time","createdAt","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback\n} from \"react-native\";\nimport { ChatRoom } from \"../../types\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  API,\n  graphqlOperation,\n  Auth,\n\n}from 'aws-amplify';\nimport {useEffect,useState} from 'react';\nimport {onCreateMessage} from '../../src/graphql/subscriptions';\nimport { Entypo } from '@expo/vector-icons';\nimport {updateChatRoom} from \"../../src/graphql/mutations\";\n\nexport type ChatListItemProps = {\n  chatRoom: ChatRoom;\n  \n}\n\nconst ChatListItem = (props: ChatListItemProps) => {\n  const { chatRoom } = props;\n  \n  const [otherUser,setOtherUser] = useState(null);\n  const[newMessage,setNewMessage] = useState(false);\n  \n  const navigation = useNavigation();\n  \n  const user = chatRoom.chatRoomUsers.items[1].user;\n\n  useEffect (() =>{\n    const getOtherUser = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      if(chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub){\n        setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n      }else{\n        setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n      }\n      \n    }\n  \n    getOtherUser();\n  },[])\n\n  console.log(chatRoom);\n\n  useEffect(() =>{\n    const subscription = API.graphql(\n      graphqlOperation(onCreateMessage)).subscribe({next:(data) => {\n        const newMessage = data.value.data.onCreateMessage;\n        console.log(newMessage.id);\n        \n       \n         console.log(data)\n        \n         setNewMessage(current => !current);\n  \n       \n        \n      }})\n      return () => subscription.unsubscribe();\n    },[])\n    const updateChatRoomLastMessage = async (messageId:string) => {\n      try{\n        await  API.graphql(graphqlOperation(updateChatRoom,{input:{id:chatRoomID,lastMessageID:messageId}}))\n       \n      }catch(e){\n        console.log(e);\n      }\n  \n    }\n\n  const onClick = () => {\n    navigation.navigate(\"ChatRoom\", {\n      id: chatRoom.id,\n      name: user.name,\n    })\n  }\n  if(!otherUser){\n    return null;\n  }\n  \n  return (\n    <TouchableWithoutFeedback onPress={onClick}>\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n       \n          <Image source={{ uri: otherUser.imageUri }} style={styles.avatar}/>\n\n          <View style={styles.midContainer} >\n            <Text style={styles.username}>{otherUser.name}</Text>\n            <Text numberOfLines={2} style={styles.lastMessage}>{chatRoom.lastMessage ? `${chatRoom.lastMessage.user.name}: ${chatRoom.lastMessage.content}` : \"none\"}</Text>\n          </View>\n\n        </View>\n\n        <Text style={styles.time}>\n          {chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default ChatListItem;"]},"metadata":{},"sourceType":"module"}