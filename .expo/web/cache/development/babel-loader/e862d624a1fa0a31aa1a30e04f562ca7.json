{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useEffect, useState } from 'react';\nimport styles from \"./styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\nimport { createChatRoom, createChatRoomUser } from \"../../src/graphql/mutations\";\nimport { getUser } from \"../../screens/queries\";\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SearchListItem = function SearchListItem(props) {\n  var user = props.user;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      foundChatRoomID = _useState2[0],\n      setFoundChatRoomID = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkMark = _useState4[0],\n      setCheckMark = _useState4[1];\n\n  useEffect(function () {\n    var searchContactList = function searchContactList() {\n      var currUser, currentUser, found;\n      return _regeneratorRuntime.async(function searchContactList$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              currUser = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: currUser.attributes.sub\n              })));\n\n            case 5:\n              currentUser = _context.sent;\n              console.log(currentUser.data.getUser.contacts.items);\n              found = currentUser.data.getUser.contacts.items.filter(function (item) {\n                return item.secondUserID == user.id;\n              });\n\n              if (!(found.length >= 1)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setCheckMark(true));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    searchContactList();\n  }, []);\n  var navigation = useNavigation();\n\n  var addToContacts = function addToContacts() {\n    console.log(\"add\", user.name);\n    setCheckMark(true);\n  };\n\n  var onClick = function onClick() {\n    var newChatRoomData, newChatRoom, room, userInfo;\n    return _regeneratorRuntime.async(function onClick$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n\n            if (!(foundChatRoomID.chatRoomID != null)) {\n              _context2.next = 4;\n              break;\n            }\n\n            navigation.navigate('ChatRoom', {\n              id: foundChatRoomID.chatRoomID,\n              name: foundChatRoomID.chatRoom.chatRoomUsers.items[1].user.name\n            });\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChatRoom, {\n              input: {}\n            })));\n\n          case 6:\n            newChatRoomData = _context2.sent;\n\n            if (newChatRoomData.data) {\n              _context2.next = 10;\n              break;\n            }\n\n            console.log(\"Failed to create a chat room\");\n            return _context2.abrupt(\"return\");\n\n          case 10:\n            newChatRoom = newChatRoomData.data.createChatRoom;\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChatRoomUser, {\n              input: {\n                userID: user.id,\n                chatRoomID: newChatRoom.id\n              }\n            })));\n\n          case 13:\n            room = _context2.sent;\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 16:\n            userInfo = _context2.sent;\n            _context2.next = 19;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChatRoomUser, {\n              input: {\n                userID: userInfo.attributes.sub,\n                chatRoomID: newChatRoom.id\n              }\n            })));\n\n          case 19:\n            navigation.navigate('ChatRoom', {\n              id: newChatRoom.id,\n              name: \"Harcoded name\"\n            });\n            _context2.next = 25;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 22]], Promise);\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.lefContainer,\n        children: [_jsx(Image, {\n          source: {\n            uri: user.imageUri\n          },\n          style: styles.avatar\n        }), _jsx(View, {\n          style: styles.midContainer,\n          children: _jsx(Text, {\n            style: styles.username,\n            children: user.name\n          })\n        })]\n      }), _jsx(View, {\n        style: {\n          justifyContent: 'space-around',\n          width: \"20%\",\n          alignItems: 'stretch'\n        },\n        children: _jsx(TouchableOpacity, {\n          onPress: addToContacts,\n          children: checkMark ? _jsx(MaterialCommunityIcons, {\n            name: \"account-check-outline\",\n            size: 24,\n            color: \"grey\"\n          }) : _jsx(MaterialIcons, {\n            name: \"person-add-alt-1\",\n            size: 24,\n            color: \"grey\"\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default SearchListItem;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/SearchListItem/index.tsx"],"names":["React","useEffect","useState","styles","useNavigation","API","graphqlOperation","Auth","createChatRoom","createChatRoomUser","getUser","MaterialCommunityIcons","MaterialIcons","SearchListItem","props","user","foundChatRoomID","setFoundChatRoomID","checkMark","setCheckMark","searchContactList","currentAuthenticatedUser","currUser","graphql","id","attributes","sub","currentUser","console","log","data","contacts","items","found","filter","item","secondUserID","length","navigation","addToContacts","name","onClick","chatRoomID","navigate","chatRoom","chatRoomUsers","input","newChatRoomData","newChatRoom","userID","room","userInfo","container","lefContainer","uri","imageUri","avatar","midContainer","username","justifyContent","width","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback,\n  TouchableOpacity\n} from \"react-native\";\nimport {useEffect,useState} from 'react';\nimport { User } from \"../../types\";\nimport styles from \"./styles\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {API,graphqlOperation,Auth} from \"aws-amplify\";\nimport {createChatRoom, createChatRoomUser} from \"../../src/graphql/mutations\"\nimport { getUser } from '../../screens/queries';\nimport {\n    MaterialCommunityIcons,\n    MaterialIcons,\n    FontAwesome,\n    Entypo,\n    Fontisto,\n    EvilIcons,\n} from '@expo/vector-icons';\n\nexport type SearchListItemProps = {\n  user: User;\n}\n\nconst SearchListItem = (props: SearchListItemProps) => {\n  const { user } = props;\n  const [foundChatRoomID,setFoundChatRoomID] = useState([]);\n  const [checkMark,setCheckMark] = useState(false);\n \n  useEffect (() =>{\n    const searchContactList = async () => {\n     \n      const currUser = await Auth.currentAuthenticatedUser();\n      const currentUser = await API.graphql(graphqlOperation(getUser,{id: currUser.attributes.sub}));\n  \n      console.log(currentUser.data.getUser.contacts.items);\n      const found = currentUser.data.getUser.contacts.items.filter(item => item.secondUserID == user.id)\n      if(found.length >= 1){return setCheckMark(true)}\n    }\n    \n    searchContactList();\n  },[])\n   \n  \n  const navigation = useNavigation();\n  const addToContacts = () =>{\n      console.log(\"add\",user.name)\n      setCheckMark(true);\n  }\n  const onClick = async() => {\n   // navigate to chat room with this user\n     try{\n       \n       \n        if(foundChatRoomID.chatRoomID != null){\n         \n          navigation.navigate('ChatRoom', {\n            id: foundChatRoomID.chatRoomID,\n            name: foundChatRoomID.chatRoom.chatRoomUsers.items[1].user.name,\n          })\n\n          return;\n        }\n        const newChatRoomData = await API.graphql(graphqlOperation(createChatRoom,{input:{}}))\n        if(!newChatRoomData.data){\n            console.log(\"Failed to create a chat room\");\n            return;\n        }\n        const newChatRoom = newChatRoomData.data.createChatRoom;\n        \n        const room = await API.graphql(graphqlOperation(createChatRoomUser,{input:{userID: user.id,chatRoomID:newChatRoom.id}}));\n        \n        const userInfo = await Auth.currentAuthenticatedUser();\n        await API.graphql(graphqlOperation(createChatRoomUser,{input:{userID: userInfo.attributes.sub,chatRoomID:newChatRoom.id}}));\n        \n        navigation.navigate('ChatRoom', {\n            id: newChatRoom.id,\n            name: \"Harcoded name\",\n          })\n     }catch(e){\n         console.log(e);\n     }\n  }\n\n  return (\n    <TouchableWithoutFeedback >\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n          <Image source={{ uri: user.imageUri }} style={styles.avatar}/>\n         \n          <View style={styles.midContainer}>\n            <Text style={styles.username}>{user.name}</Text>\n            {/*<Text numberOfLines={2} style={styles.status}>{user.status}</Text>*/}\n          </View>\n         </View>\n         \n              <View  style={{ justifyContent: 'space-around',width:\"20%\",alignItems: 'stretch' }}>\n              <TouchableOpacity onPress = {addToContacts} >\n              {checkMark?<MaterialCommunityIcons name=\"account-check-outline\" size={24} color=\"grey\" />:<MaterialIcons name=\"person-add-alt-1\" size={24} color=\"grey\" />}\n                   </TouchableOpacity>\n              </View>\n           \n        \n      </View>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default SearchListItem;"]},"metadata":{},"sourceType":"module"}