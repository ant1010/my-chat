{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport EventInput from \"../components/EventInput\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { createEvent } from \"../src/graphql/mutations\";\nimport { useEffect, useState } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport { getUser } from \"./queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function EventsScreen() {\n  var route = useRoute();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      event = _useState2[0],\n      setEvent = _useState2[1];\n\n  useEffect(function () {\n    console.log(event);\n    fetchChatRooms();\n  }, [event]);\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData, rooms, duplicateRoom, newEvent;\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            userInfo = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 6:\n            userData = _context.sent;\n            rooms = userData.data.getUser.eventUser.items;\n            duplicateRoom = false;\n            rooms.map(function (room) {\n              var users = [];\n              room.eventRoom.eventUsers.items.map(function (item) {\n                return users.push(item.user);\n              });\n\n              if (JSON.stringify(users) == JSON.stringify(event.invites)) {\n                duplicateRoom = room.eventRoomID;\n              }\n            });\n\n            if (!duplicateRoom) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createEvent, {\n              input: {\n                content: event.content,\n                eventLocation: event.location,\n                eventRoomID: duplicateRoom,\n                eventTime: event.date,\n                title: event.title,\n                userID: userInfo.attributes.sub\n              }\n            })));\n\n          case 13:\n            newEvent = _context.sent;\n\n          case 14:\n            console.log(userData.data);\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(EventInput, {\n      postEvent: setEvent\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/EventCreation.tsx"],"names":["React","View","EventInput","API","graphqlOperation","Auth","createEvent","useEffect","useState","useRoute","getUser","EventsScreen","route","event","setEvent","console","log","fetchChatRooms","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","rooms","data","eventUser","items","duplicateRoom","map","room","users","eventRoom","eventUsers","item","push","user","JSON","stringify","invites","eventRoomID","input","content","eventLocation","location","eventTime","date","title","userID","newEvent","styles","container","StyleSheet","create","flex","alignItems","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet,Text} from 'react-native';\nimport { View } from '../components/Themed';\nimport EventListItem from '../components/EventListItem';\nimport EventInput from '../components/EventInput';\nimport {API,graphqlOperation,Auth} from 'aws-amplify';\nimport {createEventUser,createEvent} from '../src/graphql/mutations';\nimport {useEffect,useState} from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport {getUser} from './queries';\nexport default function EventsScreen() {\n    const route = useRoute();\n    const [event,setEvent] = useState([]);\n    useEffect(() => {\n        console.log(event);\n        fetchChatRooms();\n    },[event]);\n    const fetchChatRooms = async () => {\n      try{\n\n        //pull data-->loop thru eventRooms comparing new event invites--> \n        //if no group exists then create new group along with n eventUsers, else create event with \n        //said group.\n          const userInfo = await Auth.currentAuthenticatedUser();\n          \n          const userData = await API.graphql(\n              graphqlOperation(\n                  getUser, {\n                      id: userInfo.attributes.sub,\n                  }\n              )\n          )\n          \n          const rooms = userData.data.getUser.eventUser.items;\n         //finds eventRoom with identicle invtites/room users\n          let duplicateRoom = false;\n          rooms.map((room) => {\n            let users = [];\n            room.eventRoom.eventUsers.items.map((item) => users.push(item.user))\n            if(JSON.stringify(users)==JSON.stringify(event.invites)){duplicateRoom = room.eventRoomID;}\n          })\n          if(duplicateRoom){\n            const newEvent = await API.graphql(\n              graphqlOperation(\n                createEvent,{\n                  input: {\n                    content: event.content, eventLocation: event.location, eventRoomID: duplicateRoom, eventTime: event.date, title: event.title, userID:userInfo.attributes.sub\n                  }}));\n\n            // event.invites.map((user)=> {\n            //    const newEventUser =  await API.graphql(graphqlOperation(createEventUser,{input: {eventRoomID: duplicateRoom, userID: user.id}}));\n\n            // })\n            \n          }\n         // setEventRooms(listevents);\n          \n          console.log(userData.data);\n          \n      }catch(e){\n          console.log(e);\n      }\n      \n }\n \n\n  return (\n    <View style={styles.container}>\n    \n     <EventInput postEvent = {setEvent}/>\n    \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    color:'white',\n    \n  },\n});"]},"metadata":{},"sourceType":"module"}