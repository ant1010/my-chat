{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { FontAwesome } from '@expo/vector-icons';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { Octicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport TabOneScreen from \"../screens/TabOneScreen\";\nimport TabTwoScreen from \"../screens/TabTwoScreen\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Navigation(_ref) {\n  var colorScheme = _ref.colorScheme;\n  return _jsx(NavigationContainer, {\n    linking: LinkingConfiguration,\n    theme: colorScheme === 'dark' ? DarkTheme : DefaultTheme,\n    children: _jsx(RootNavigator, {})\n  });\n}\nvar Stack = createNativeStackNavigator();\n\nfunction RootNavigator() {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: Colors.light.tint\n      },\n      headerTintColor: Colors.light.background,\n      headerTitleStyle: {\n        fontWeight: 'bold'\n      }\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Root\",\n      component: MainTabNavigator,\n      options: {\n        title: \"WhatsApp\",\n        headerRight: function headerRight() {\n          return _jsxs(View, {\n            style: {\n              flexDirection: 'row',\n              width: 60,\n              justifyContent: 'space-between',\n              marginRight: 10\n            },\n            children: [_jsx(Octicons, {\n              name: \"search\",\n              size: 22,\n              color: 'white'\n            }), _jsx(MaterialCommunityIcons, {\n              name: \"dots-vertical\",\n              size: 22,\n              color: 'white'\n            })]\n          });\n        }\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"NotFound\",\n      component: NotFoundScreen,\n      options: {\n        title: 'Oops!'\n      }\n    }), _jsx(Stack.Group, {\n      screenOptions: {\n        presentation: 'modal'\n      },\n      children: _jsx(Stack.Screen, {\n        name: \"Modal\",\n        component: ModalScreen\n      })\n    })]\n  });\n}\n\nvar MainTab = createMaterialTopTabNavigator();\n\nfunction MainTabNavigator() {\n  var colorScheme = useColorScheme();\n  return _jsxs(MainTab.Navigator, {\n    initialRouteName: \"TabOne\",\n    screenOptions: {\n      tabBarActiveTintColor: Colors[colorScheme].background,\n      tabBarStyle: {\n        backgroundColor: Colors[colorScheme].tint\n      },\n      indicatorStyle: {\n        backgroundColor: Colors[colorScheme].backg\n      }\n    },\n    children: [_jsx(MainTab.Screen, {\n      name: \"TabOne\",\n      component: TabOneScreen,\n      options: function options(_ref2) {\n        var navigation = _ref2.navigation;\n        return {\n          title: 'Tab One',\n          tabBarIcon: function tabBarIcon(_ref3) {\n            var color = _ref3.color;\n            return _jsx(TabBarIcon, {\n              name: \"code\",\n              color: color\n            });\n          },\n          headerRight: function headerRight() {\n            return _jsx(Pressable, {\n              onPress: function onPress() {\n                return navigation.navigate('Modal');\n              },\n              style: function style(_ref4) {\n                var pressed = _ref4.pressed;\n                return {\n                  opacity: pressed ? 0.5 : 1\n                };\n              },\n              children: _jsx(FontAwesome, {\n                name: \"info-circle\",\n                size: 25,\n                color: Colors[colorScheme].text,\n                style: {\n                  marginRight: 15\n                }\n              })\n            });\n          }\n        };\n      }\n    }), _jsx(MainTab.Screen, {\n      name: \"TabTwo\",\n      component: TabTwoScreen,\n      options: {\n        title: 'Tab Two',\n        tabBarIcon: function tabBarIcon(_ref5) {\n          var color = _ref5.color;\n          return _jsx(TabBarIcon, {\n            name: \"code\",\n            color: color\n          });\n        }\n      }\n    })]\n  });\n}\n\nfunction TabBarIcon(props) {\n  return _jsx(FontAwesome, _objectSpread({\n    size: 30,\n    style: {\n      marginBottom: -3\n    }\n  }, props));\n}","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/navigation/index.tsx"],"names":["FontAwesome","NavigationContainer","DefaultTheme","DarkTheme","createNativeStackNavigator","React","createMaterialTopTabNavigator","Octicons","MaterialCommunityIcons","Colors","useColorScheme","ModalScreen","NotFoundScreen","TabOneScreen","TabTwoScreen","LinkingConfiguration","Navigation","colorScheme","Stack","RootNavigator","headerStyle","backgroundColor","light","tint","headerTintColor","background","headerTitleStyle","fontWeight","MainTabNavigator","title","headerRight","flexDirection","width","justifyContent","marginRight","presentation","MainTab","tabBarActiveTintColor","tabBarStyle","indicatorStyle","backg","navigation","tabBarIcon","color","navigate","pressed","opacity","text","TabBarIcon","props","marginBottom"],"mappings":"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","sourcesContent":["/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable,View } from 'react-native';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nimport {Octicons,MaterialCommunityIcons} from '@expo/vector-icons';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator\n    screenOptions={{\n      headerStyle: {\n        backgroundColor: Colors.light.tint,\n      },\n      headerTintColor: Colors.light.background,\n      \n      headerTitleStyle: {\n        fontWeight: 'bold',\n        \n      }\n\n    }}\n    >\n      <Stack.Screen name=\"Root\" component={MainTabNavigator} options={{\n        title:\"WhatsApp\",\n        headerRight: () => (\n          <View style = {{flexDirection: 'row', width: 60,justifyContent: 'space-between', marginRight:10}}>\n          <Octicons name = \"search\" size = {22} color = {'white'}/>\n          <MaterialCommunityIcons name = 'dots-vertical' size = {22} color = {'white'}/>\n          </View>\n        )\n        \n        }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst MainTab = createMaterialTopTabNavigator<RootTabParamList>();\n\nfunction MainTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <MainTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor:Colors[colorScheme].background,\n        \n        tabBarStyle:{\n          backgroundColor: Colors[colorScheme].tint,\n        },\n        indicatorStyle:{\n          backgroundColor:Colors[colorScheme].backg\n        },\n      }}>\n      <MainTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Tab One',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Modal')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <MainTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Tab Two',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </MainTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n"]},"metadata":{},"sourceType":"module"}