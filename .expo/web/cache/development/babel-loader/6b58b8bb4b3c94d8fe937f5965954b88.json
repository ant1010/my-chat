{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"./styles\";\nimport { API, Auth, graphqlOperation } from \"aws-amplify\";\nimport { createMessage } from \"../../src/graphql/mutations\";\nimport { MaterialCommunityIcons, MaterialIcons, FontAwesome5, Entypo, Fontisto } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InputBox = function InputBox(props) {\n  var chatRoomID = props.chatRoomID;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myUserId = _useState4[0],\n      setMyUserId = _useState4[1];\n\n  useEffect(function () {\n    var fetchUser = function fetchUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function fetchUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n              setMyUserId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUser();\n  }, []);\n\n  var onMicrophonePress = function onMicrophonePress() {\n    console.warn('Microphone');\n  };\n\n  var onSendPress = function onSendPress() {\n    var newMessageData;\n    return _regeneratorRuntime.async(function onSendPress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.warn(\"Sending: \" + message);\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createMessage, {\n              input: {\n                content: message,\n                userID: myUserId,\n                chatRoomID: chatRoomID\n              }\n            })));\n\n          case 4:\n            newMessageData = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(updateChatRoomLasMessge(newMessageData.data));\n\n          case 7:\n            _context2.next = 11;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n\n          case 11:\n            setMessage('');\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  var updateChatRoomLasMessge = function updateChatRoomLasMessge(messageId) {\n    return _regeneratorRuntime.async(function updateChatRoomLasMessge$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onPress = function onPress() {\n    if (!message) {\n      onMicrophonePress();\n    } else {\n      onSendPress();\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.mainContainer,\n      children: [_jsx(FontAwesome5, {\n        name: \"laugh-beam\",\n        size: 24,\n        color: \"grey\"\n      }), _jsx(TextInput, {\n        placeholder: \"Type a message\",\n        style: styles.textInput,\n        multiline: true,\n        value: message,\n        onChangeText: setMessage\n      }), _jsx(Entypo, {\n        name: \"attachment\",\n        size: 24,\n        color: \"grey\",\n        style: styles.icon\n      }), !message && _jsx(Fontisto, {\n        name: \"camera\",\n        size: 24,\n        color: \"grey\",\n        style: styles.icon\n      })]\n    }), _jsx(TouchableOpacity, {\n      onPress: onPress,\n      children: _jsx(View, {\n        style: styles.buttonContainer,\n        children: !message ? _jsx(MaterialCommunityIcons, {\n          name: \"microphone\",\n          size: 28,\n          color: \"white\"\n        }) : _jsx(MaterialIcons, {\n          name: \"send\",\n          size: 28,\n          color: \"white\"\n        })\n      })\n    })]\n  });\n};\n\nexport default InputBox;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/InputBox/index.tsx"],"names":["React","useState","useEffect","styles","API","Auth","graphqlOperation","createMessage","MaterialCommunityIcons","MaterialIcons","FontAwesome5","Entypo","Fontisto","InputBox","props","chatRoomID","message","setMessage","myUserId","setMyUserId","fetchUser","currentAuthenticatedUser","userInfo","attributes","sub","onMicrophonePress","console","warn","onSendPress","graphql","input","content","userID","newMessageData","updateChatRoomLasMessge","data","messageId","onPress","container","mainContainer","textInput","icon","buttonContainer"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport {View, Text, TextInput, TouchableOpacity,} from \"react-native\";\nimport styles from './styles';\nimport{API,Auth,graphqlOperation,} from \"aws-amplify\";\nimport {createMessage} from \"../../src/graphql/mutations\";\nimport {\n  MaterialCommunityIcons,\n  MaterialIcons,\n  FontAwesome5,\n  Entypo,\n  Fontisto,\n} from '@expo/vector-icons';\n\nconst InputBox = (props) => {\n\n  const {chatRoomID} = props;\n  const [message, setMessage] = useState('');\n  const [myUserId, setMyUserId] = useState('');\n\n    useEffect(() => {\n      const fetchUser = async () => {\n        const userInfo = await Auth.currentAuthenticatedUser();\n\n        setMyUserId(userInfo.attributes.sub);\n      }\n      fetchUser();\n    },[])\n  const onMicrophonePress = () => {\n    console.warn('Microphone')\n  }\n\n  const onSendPress = async () => {\n    console.warn(`Sending: ${message}`)\n\n    // send the message to the backend\n    try{\n    const newMessageData =  await API.graphql(graphqlOperation(createMessage,{input:{content:message,userID:myUserId,chatRoomID}}))\n   await updateChatRoomLasMessge(newMessageData.data)\n    }catch(e){\n      \n    }\n\n    setMessage('');\n  }\n\n  const updateChatRoomLasMessge = async (messageId:string) => {\n\n  }\n  const onPress = () => {\n    if (!message) {\n      onMicrophonePress();\n    } else {\n      onSendPress();\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.mainContainer}>\n        <FontAwesome5 name=\"laugh-beam\" size={24} color=\"grey\" />\n        <TextInput\n          placeholder={\"Type a message\"}\n          style={styles.textInput}\n          multiline\n          value={message}\n          onChangeText={setMessage}\n        />\n        <Entypo name=\"attachment\" size={24} color=\"grey\" style={styles.icon} />\n        {!message && <Fontisto name=\"camera\" size={24} color=\"grey\" style={styles.icon} />}\n      </View>\n      <TouchableOpacity onPress={onPress}>\n        <View style={styles.buttonContainer}>\n          {!message\n            ? <MaterialCommunityIcons name=\"microphone\" size={28} color=\"white\" />\n            : <MaterialIcons name=\"send\" size={28} color=\"white\" />}\n        </View>\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nexport default InputBox;"]},"metadata":{},"sourceType":"module"}