{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport ContactListItem from \"../components/ContactListItem\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { getUser } from \"./queries\";\nimport { useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ContactsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  useEffect(function () {\n    var fetchUsers = function fetchUsers() {\n      var userInfo, userData;\n      return _regeneratorRuntime.async(function fetchUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 3:\n              userInfo = _context.sent;\n              console.log(userInfo);\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: userInfo.attributes.sub\n              })));\n\n            case 7:\n              userData = _context.sent;\n              console.log(userData);\n              setUsers(userData.data.getUser.contacts.items);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    fetchUsers();\n  }, []);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      style: {\n        width: '100%'\n      },\n      data: users,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ContactListItem, {\n          user: item\n        });\n      },\n      numColumns: 2,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ContactsScreen.tsx"],"names":["React","View","ContactListItem","API","graphqlOperation","Auth","getUser","useEffect","useState","ContactsScreen","users","setUsers","fetchUsers","currentAuthenticatedUser","userInfo","console","log","graphql","id","attributes","sub","userData","data","contacts","items","styles","container","width","item","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,IAAT;AACA,OAAOC,eAAP;AACA,SAAQC,GAAR,EAAYC,gBAAZ,EAA6BC,IAA7B,QAAwC,aAAxC;AAEA,SAAQC,OAAR;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;;AACA,eAAe,SAASC,cAAT,GAA0B;AACrC,kBAAyBD,QAAQ,CAAC,EAAD,CAAjC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAaC,QAAb;;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMK,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUP,IAAI,CAACQ,wBAAL,EAFV;;AAAA;AAEPC,cAAAA,QAFO;AAGbC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAHa;AAAA,+CAIUX,GAAG,CAACc,OAAJ,CACnBb,gBAAgB,CACZE,OADY,EACH;AACLY,gBAAAA,EAAE,EAAEJ,QAAQ,CAACK,UAAT,CAAoBC;AADnB,eADG,CADG,CAJV;;AAAA;AAIPC,cAAAA,QAJO;AAWbN,cAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACAV,cAAAA,QAAQ,CAACU,QAAQ,CAACC,IAAT,CAAchB,OAAd,CAAsBiB,QAAtB,CAA+BC,KAAhC,CAAR;AAZa;AAAA;;AAAA;AAAA;AAAA;AAcXT,cAAAA,OAAO,CAACC,GAAR;;AAdW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAiBDJ,IAAAA,UAAU;AACZ,GAnBQ,EAmBN,EAnBM,CAAT;AAoBF,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC,SAApB;AAAA,cACE,KAAC,QAAD;AACE,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OADT;AAEE,MAAA,IAAI,EAAEjB,KAFR;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGkB,IAAH,QAAGA,IAAH;AAAA,eAAc,KAAC,eAAD;AAAiB,UAAA,IAAI,EAAEA;AAAvB,UAAd;AAAA,OAHd;AAIE,MAAA,UAAU,EAAE,CAJd;AAKE,MAAA,YAAY,EAAE,sBAACA,IAAD;AAAA,eAAUA,IAAI,CAACV,EAAf;AAAA;AALhB;AADF,IADF;AAWD;AAED,IAAMO,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport ContactListItem from '../components/ContactListItem';\nimport {API,graphqlOperation,Auth} from 'aws-amplify';\nimport {listUsers} from '../src/graphql/queries';\nimport {getUser} from './queries';\nimport {useEffect,useState} from 'react';\nexport default function ContactsScreen() {\n    const [users,setUsers] = useState([]);\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try{\n              const userInfo = await Auth.currentAuthenticatedUser();\n              console.log(userInfo);\n              const userData = await API.graphql(\n                  graphqlOperation(\n                      getUser, {\n                          id: userInfo.attributes.sub,\n                      }\n                  )\n              )\n              console.log(userData);\n              setUsers(userData.data.getUser.contacts.items);\n            }catch(e){\n                console.log(e);\n            }\n        }\n       fetchUsers();\n    }, [])\n  return (\n    <View style={styles.container}>\n      <FlatList\n        style={{width: '100%'}}\n        data={users}\n        renderItem={({ item }) => <ContactListItem user={item} />}\n        numColumns={2}\n        keyExtractor={(item) => item.id}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}