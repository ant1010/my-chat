{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { View } from \"../components/Themed\";\nimport EventInput from \"../components/EventInput\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { createEventUser, createEvent, createEventRoom } from \"../src/graphql/mutations\";\nimport { useEffect, useState } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport { getUser } from \"./queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function EventsScreen() {\n  var route = useRoute();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      event = _useState2[0],\n      setEvent = _useState2[1];\n\n  var _useState3 = useState(\"works\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  useEffect(function () {\n    if (event != null) {\n      console.log(event);\n      fetchChatRooms();\n    }\n  }, [event]);\n\n  var fetchChatRooms = function fetchChatRooms() {\n    var userInfo, userData, rooms, duplicateRoom, newEvent, _newEvent;\n\n    return _regeneratorRuntime.async(function fetchChatRooms$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setMessage(\"gets to point A\");\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 4:\n            userInfo = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n              id: userInfo.attributes.sub\n            })));\n\n          case 7:\n            userData = _context.sent;\n            rooms = userData.data.getUser.eventUser.items;\n            duplicateRoom = false;\n            rooms.map(function (room) {\n              var users = [];\n              room.eventRoom.eventUsers.items.map(function (item) {\n                return users.push(item.user);\n              });\n\n              if (JSON.stringify(users) == JSON.stringify(event.invites)) {\n                duplicateRoom = room.eventRoomID;\n              }\n            });\n\n            if (!duplicateRoom) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createEvent, {\n              input: {\n                content: event.content,\n                eventLocation: event.location,\n                eventRoomID: duplicateRoom,\n                eventTime: event.date,\n                title: event.title,\n                userID: userInfo.attributes.sub\n              }\n            })));\n\n          case 14:\n            newEvent = _context.sent;\n            _context.next = 21;\n            break;\n\n          case 17:\n            _context.next = 19;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createEventRoom, {\n              input: {\n                content: event.content,\n                eventLocation: event.location,\n                eventRoomID: duplicateRoom,\n                eventTime: event.date,\n                title: event.title,\n                userID: userInfo.attributes.sub\n              }\n            })));\n\n          case 19:\n            _newEvent = _context.sent;\n            event.invites.map(function (user) {\n              var newEventUser = API.graphql(graphqlOperation(createEventUser, {\n                input: {\n                  eventRoomID: duplicateRoom,\n                  userID: user.id\n                }\n              }));\n            });\n\n          case 21:\n            console.log(userData.data);\n            _context.next = 28;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](0);\n            setMessage(\"does not work\");\n            console.log(\"didnt work\", _context.t0);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 24]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(EventInput, {\n      postEvent: setEvent\n    }), _jsx(Text, {\n      style: styles.container,\n      children: message\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/EventCreation.tsx"],"names":["React","View","EventInput","API","graphqlOperation","Auth","createEventUser","createEvent","createEventRoom","useEffect","useState","useRoute","getUser","EventsScreen","route","event","setEvent","message","setMessage","console","log","fetchChatRooms","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","rooms","data","eventUser","items","duplicateRoom","map","room","users","eventRoom","eventUsers","item","push","user","JSON","stringify","invites","eventRoomID","input","content","eventLocation","location","eventTime","date","title","userID","newEvent","newEventUser","styles","container","StyleSheet","create","flex","alignItems","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet,Text} from 'react-native';\nimport { View } from '../components/Themed';\nimport EventListItem from '../components/EventListItem';\nimport EventInput from '../components/EventInput';\nimport {API,graphqlOperation,Auth} from 'aws-amplify';\nimport {createEventUser,createEvent,createEventRoom} from '../src/graphql/mutations';\nimport {useEffect,useState} from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport {getUser} from './queries';\nexport default function EventsScreen() {\n    const route = useRoute();\n    const [event,setEvent] = useState(null);\n    const [message,setMessage] = useState(\"works\");\n    useEffect(() => {\n        //console.log(event);\n        if(event != null){  \n          console.log(event);\n           fetchChatRooms();}\n     \n    },[event]);\n  const fetchChatRooms = async () => {\n    try {\n      setMessage(\"gets to point A\");\n      //pull data-->loop thru eventRooms comparing new event invites--> \n      //if no group exists then create new group along with n eventUsers, else create event with \n      //said group.\n      const userInfo = await Auth.currentAuthenticatedUser();\n\n      const userData = await API.graphql(\n        graphqlOperation(\n          getUser, {\n          id: userInfo.attributes.sub,\n        }\n        )\n      )\n\n      const rooms = userData.data.getUser.eventUser.items;\n      //finds eventRoom with identicle invtites/room users\n      let duplicateRoom = false;\n      rooms.map((room) => {\n        let users = [];\n        room.eventRoom.eventUsers.items.map((item) => users.push(item.user))\n        if (JSON.stringify(users) == JSON.stringify(event.invites)) { duplicateRoom = room.eventRoomID; }\n      })\n      if (duplicateRoom) {\n        const newEvent = await API.graphql(\n          graphqlOperation(\n            createEvent, {\n            input: {\n              content: event.content, eventLocation: event.location, eventRoomID: duplicateRoom, eventTime: event.date, title: event.title, userID: userInfo.attributes.sub\n            }\n          }));\n      } else {\n        const newEvent = await API.graphql(\n          graphqlOperation(\n            createEventRoom, {\n            input: {\n              content: event.content, eventLocation: event.location, eventRoomID: duplicateRoom, eventTime: event.date, title: event.title, userID: userInfo.attributes.sub\n            }\n          }));\n        event.invites.map((user) => {\n          const newEventUser = API.graphql(graphqlOperation(createEventUser, { input: { eventRoomID: duplicateRoom, userID: user.id } }));\n\n        })\n\n      }\n      // setEventRooms(listevents);\n\n      console.log(userData.data);\n\n      }catch(e){\n        setMessage(\"does not work\")\n          console.log(\"didnt work\",e);\n\n      }\n      \n }\n \n\n  return (\n    <View style={styles.container}>\n    \n     <EventInput postEvent = {setEvent}/>\n     <Text style={styles.container}>{message}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    color:'white',\n    \n  },\n});"]},"metadata":{},"sourceType":"module"}