{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport ContactListItem from \"../components/ContactListItem\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { getUser } from \"./queries\";\nimport { useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ContactsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      owner = _useState4[0],\n      setOwner = _useState4[1];\n\n  useEffect(function () {\n    var isMounted = true;\n\n    var fetchUsers = function fetchUsers() {\n      var userInfo, userData;\n      return _regeneratorRuntime.async(function fetchUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 3:\n              userInfo = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: userInfo.attributes.sub\n              })));\n\n            case 6:\n              userData = _context.sent;\n              setOwner(userInfo);\n              console.log(userInfo);\n\n              if (isMounted) {\n                setUsers(userData.data.getUser.contacts.items);\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    fetchUsers();\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(FlatList, {\n      style: {\n        width: '100%'\n      },\n      data: users,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ContactListItem, {\n          user: item.userTwo\n        });\n      },\n      numColumns: 2,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ContactsScreen.tsx"],"names":["React","View","ContactListItem","API","graphqlOperation","Auth","getUser","useEffect","useState","ContactsScreen","users","setUsers","owner","setOwner","isMounted","fetchUsers","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","console","log","data","contacts","items","styles","container","width","item","userTwo","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,IAAT;AACA,OAAOC,eAAP;AACA,SAAQC,GAAR,EAAYC,gBAAZ,EAA6BC,IAA7B,QAAwC,aAAxC;AAEA,SAAQC,OAAR;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;;AAEA,eAAe,SAASC,cAAT,GAA0B;AACrC,kBAAyBD,QAAQ,CAAC,EAAD,CAAjC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAaC,QAAb;;AACA,mBAAyBH,QAAQ,EAAjC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAaC,QAAb;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACb,QAAIO,SAAS,GAAG,IAAhB;;AACC,QAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUV,IAAI,CAACW,wBAAL,EAFV;;AAAA;AAEPC,cAAAA,QAFO;AAAA;AAAA,+CAIUd,GAAG,CAACe,OAAJ,CACnBd,gBAAgB,CACZE,OADY,EACH;AACLa,gBAAAA,EAAE,EAAEF,QAAQ,CAACG,UAAT,CAAoBC;AADnB,eADG,CADG,CAJV;;AAAA;AAIPC,cAAAA,QAJO;AAWbT,cAAAA,QAAQ,CAACI,QAAD,CAAR;AACAM,cAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;;AACF,kBAAGH,SAAH,EAAa;AAAGH,gBAAAA,QAAQ,CAACW,QAAQ,CAACG,IAAT,CAAcnB,OAAd,CAAsBoB,QAAtB,CAA+BC,KAAhC,CAAR;AAAgD;;AAbjD;AAAA;;AAAA;AAAA;AAAA;AAeXJ,cAAAA,OAAO,CAACC,GAAR;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAkBDT,IAAAA,UAAU;AACV,WAAO,YAAM;AAAED,MAAAA,SAAS,GAAG,KAAZ;AAAmB,KAAlC;AACF,GAtBQ,EAsBN,EAtBM,CAAT;AA+CF,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEc,MAAM,CAACC,SAApB;AAAA,cACE,KAAC,QAAD;AACE,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OADT;AAEE,MAAA,IAAI,EAAEpB,KAFR;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGqB,IAAH,QAAGA,IAAH;AAAA,eAAc,KAAC,eAAD;AAAiB,UAAA,IAAI,EAAEA,IAAI,CAACC;AAA5B,UAAd;AAAA,OAHd;AAIE,MAAA,UAAU,EAAE,CAJd;AAKE,MAAA,YAAY,EAAE,sBAACD,IAAD;AAAA,eAAUA,IAAI,CAACZ,EAAf;AAAA;AALhB;AADF,IADF;AAWD;AAED,IAAMS,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport ContactListItem from '../components/ContactListItem';\nimport {API,graphqlOperation,Auth} from 'aws-amplify';\nimport {listUsers} from '../src/graphql/queries';\nimport {getUser} from './queries';\nimport {useEffect,useState} from 'react';\nimport {onUpdateFriendPair} from '../src/graphql/subscriptions';\nexport default function ContactsScreen() {\n    const [users,setUsers] = useState([]);\n    const [owner,setOwner] = useState();\n    useEffect(() => {\n       let isMounted = true; \n        const fetchUsers = async () => {\n            try{\n              const userInfo = await Auth.currentAuthenticatedUser();\n              \n              const userData = await API.graphql(\n                  graphqlOperation(\n                      getUser, {\n                          id: userInfo.attributes.sub,\n                      }\n                  )\n              )\n              setOwner(userInfo);\n              console.log(userInfo);\n            if(isMounted){  setUsers(userData.data.getUser.contacts.items);}\n            }catch(e){\n                console.log(e);\n            }\n        }\n       fetchUsers();\n       return () => { isMounted = false }; \n    }, [])\n    // useEffect(() =>{\n    //   const subscription = API.graphql(\n    //     graphqlOperation(onUpdateFriendPair,{owner:})).subscribe({next:(data) => {\n    //       const newMessage = data.value.data.onCreateMessage;\n        \n          \n    //       if(newMessage.chatRoomID !== route.params.id){\n           \n    //         return;\n    //       }\n    //        setNewMessage(newMessage);\n    //        console.log(\"message recieved\");\n    //       // setMessages([newMessage, ...messages]);\n         \n           \n         \n    //       updateChatRoomLastMessage(newMessage.id);\n         \n    //       fetchMessages();\n          \n    //     }})\n      \n    //   return () => subscription.unsubscribe();\n    // },[])\n  return (\n    <View style={styles.container}>\n      <FlatList\n        style={{width: '100%'}}\n        data={users}\n        renderItem={({ item }) => <ContactListItem user={item.userTwo} />}\n        numColumns={2}\n        keyExtractor={(item) => item.id}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}