{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { View } from \"../components/Themed\";\nimport ContactListItem from \"../components/ContactListItem\";\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { getUser } from \"./queries\";\nimport { useEffect, useState } from 'react';\nimport { onDeleteFriendPair } from \"../src/graphql/subscriptions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar wait = function wait(timeout) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, timeout);\n  });\n};\n\nexport default function ContactsScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      owner = _useState4[0],\n      setOwner = _useState4[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    wait(2000).then(function () {\n      return setRefreshing(false);\n    });\n  }, []);\n  useEffect(function () {\n    var isMounted = true;\n\n    var fetchUsers = function fetchUsers() {\n      var userInfo, userData;\n      return _regeneratorRuntime.async(function fetchUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 3:\n              userInfo = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: userInfo.attributes.sub\n              })));\n\n            case 6:\n              userData = _context.sent;\n              setOwner(userInfo.attributes.sub);\n\n              if (isMounted) {\n                setUsers(userData.data.getUser.contacts.items);\n              }\n\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    };\n\n    fetchUsers();\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onDeleteFriendPair, {\n      owner: \"tony111\"\n    })).subscribe({\n      next: function next(data) {\n        console.log(data);\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n  return _jsx(SafeAreaView, {\n    style: styles.container2,\n    children: _jsx(ScrollView, {\n      contentContainerStyle: styles.scrollView,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh\n      }),\n      children: _jsx(View, {\n        style: styles.container,\n        children: _jsx(FlatList, {\n          style: {\n            width: '100%'\n          },\n          data: users,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsx(ContactListItem, {\n              user: item.userTwo\n            });\n          },\n          numColumns: 2,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          }\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container2: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  scrollView: {\n    flex: 1,\n    backgroundColor: 'pink',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ContactsScreen.tsx"],"names":["React","View","ContactListItem","API","graphqlOperation","Auth","getUser","useEffect","useState","onDeleteFriendPair","wait","timeout","Promise","resolve","setTimeout","ContactsScreen","users","setUsers","owner","setOwner","refreshing","setRefreshing","onRefresh","useCallback","then","isMounted","fetchUsers","currentAuthenticatedUser","userInfo","graphql","id","attributes","sub","userData","data","contacts","items","console","log","subscription","subscribe","next","unsubscribe","styles","container2","scrollView","container","width","item","userTwo","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {RefreshControl, SafeAreaView, ScrollView, FlatList, StyleSheet} from 'react-native';\nimport { View } from '../components/Themed';\nimport ContactListItem from '../components/ContactListItem';\nimport {API,graphqlOperation,Auth} from 'aws-amplify';\nimport {listUsers} from '../src/graphql/queries';\nimport {getUser} from './queries';\nimport {useEffect,useState} from 'react';\nimport {onDeleteFriendPair} from '../src/graphql/subscriptions';\nconst wait = (timeout) => {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n}\n\nexport default function ContactsScreen() {\n    const [users,setUsers] = useState([]);\n    const [owner,setOwner] = useState();\n    const [refreshing, setRefreshing] = React.useState(false);\n\n    const onRefresh = React.useCallback(() => {\n      setRefreshing(true);\n      wait(2000).then(() => setRefreshing(false));\n    }, []);\n  \n    useEffect(() => {\n       let isMounted = true; \n        const fetchUsers = async () => {\n            try{\n              const userInfo = await Auth.currentAuthenticatedUser();\n              \n              const userData = await API.graphql(\n                  graphqlOperation(\n                      getUser, {\n                          id: userInfo.attributes.sub,\n                      }\n                  )\n              )\n              setOwner(userInfo.attributes.sub);\n             \n            if(isMounted){  setUsers(userData.data.getUser.contacts.items);}\n            }catch(e){\n                console.log(e);\n            }\n        }\n       fetchUsers();\n       return () => { isMounted = false }; \n    }, [])\n    useEffect(() =>{\n      const subscription = API.graphql(\n        graphqlOperation(onDeleteFriendPair,{owner:\"tony111\"})).subscribe({next:(data) => {\n          //const friendPair = data.value.data.onCreateMessage;\n        console.log(data);\n          \n         \n           \n          \n        }})\n      \n      return () => subscription.unsubscribe();\n    },[])\n  return (\n    <SafeAreaView style={styles.container2}>\n      <ScrollView\n        contentContainerStyle={styles.scrollView}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n          />\n        }\n      >\n    <View style={styles.container}>\n      <FlatList\n        style={{width: '100%'}}\n        data={users}\n        renderItem={({ item }) => <ContactListItem user={item.userTwo} />}\n        numColumns={2}\n        keyExtractor={(item) => item.id}\n      />\n    </View>\n    </ScrollView>\n    </SafeAreaView >\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container2: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  scrollView: {\n    flex: 1,\n    backgroundColor: 'pink',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}