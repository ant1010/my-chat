{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport styles from \"./styles\";\nimport { API, Auth, graphqlOperation } from \"aws-amplify\";\nimport { createEvents } from \"../../src/graphql/mutations\";\nimport { listUsers } from \"../../src/graphql/queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EventInput = function EventInput() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      description = _useState2[0],\n      setDescription = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myUserId = _useState4[0],\n      setMyUserId = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nextSelectedInvite = _useState6[0],\n      setNextSelectedInvite = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      inviteList = _useState8[0],\n      setInviteList = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      filterFriendList = _useState10[0],\n      setFilterFriendList = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      users = _useState12[0],\n      setUsers = _useState12[1];\n\n  useEffect(function () {\n    var fetchUsers = function fetchUsers() {\n      var userData;\n      return _regeneratorRuntime.async(function fetchUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(listUsers)));\n\n            case 3:\n              userData = _context.sent;\n              console.log(userData);\n              setUsers(userData.data.listUsers.items);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    fetchUsers();\n  }, []);\n  useEffect(function () {\n    var list = [];\n    users.forEach(function (element) {\n      if (element.name.includes(nextSelectedInvite)) list.push(element);\n    });\n    setFilterFriendList(list);\n    console.log(filterFriendList);\n  }, [nextSelectedInvite]);\n  useEffect(function () {\n    var fetchUser = function fetchUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function fetchUser$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context2.sent;\n              setMyUserId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUser();\n  }, []);\n\n  var onMicrophonePress = function onMicrophonePress() {\n    console.warn('Microphone');\n  };\n\n  var onSendPress = function onSendPress() {\n    var newEventData;\n    return _regeneratorRuntime.async(function onSendPress$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createEvents, {\n              input: {\n                content: description,\n                userID: myUserId,\n                chatRoomID: chatRoomID\n              }\n            })));\n\n          case 3:\n            newEventData = _context3.sent;\n            console.log(newEventData);\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var onPress = function onPress() {\n    onSendPress();\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n    keyboardVerticalOffset: 100,\n    style: {\n      width: '100%'\n    },\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.mainContainer,\n        children: [_jsx(TextInput, {\n          placeholder: \"Type a message\",\n          style: styles.textInput,\n          multiline: true,\n          value: nextSelectedInvite,\n          onChangeText: setNextSelectedInvite\n        }), _jsx(FlatList, {\n          data: filterFriendList,\n          renderItem: function renderItem(item) {\n            return _jsx(View, {\n              children: _jsx(Text, {\n                children: item.name\n              })\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          }\n        })]\n      })\n    })\n  });\n};\n\nexport default EventInput;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/EventInput/index.tsx"],"names":["React","useState","useEffect","styles","API","Auth","graphqlOperation","createEvents","listUsers","EventInput","description","setDescription","myUserId","setMyUserId","nextSelectedInvite","setNextSelectedInvite","inviteList","setInviteList","filterFriendList","setFilterFriendList","users","setUsers","fetchUsers","graphql","userData","console","log","data","items","list","forEach","element","name","includes","push","fetchUser","currentAuthenticatedUser","userInfo","attributes","sub","onMicrophonePress","warn","onSendPress","input","content","userID","chatRoomID","newEventData","onPress","Platform","OS","width","container","mainContainer","textInput","item","id"],"mappings":"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","sourcesContent":["import React, {useState,useEffect,Fragment} from 'react';\nimport {View,FlatList, Text, TextInput, KeyboardAvoidingView,Platform,} from \"react-native\";\nimport styles from './styles';\nimport{API,Auth,graphqlOperation,} from \"aws-amplify\";\nimport {createEvents,updateChatRoom} from \"../../src/graphql/mutations\";\nimport {listUsers} from '../../src/graphql/queries';\nimport {\n  MaterialCommunityIcons,\n  MaterialIcons,\n  FontAwesome5,\n  Entypo,\n  Fontisto,\n} from '@expo/vector-icons';\n\nconst EventInput = () => {\n\n  //const {chatRoomID} = props;\n  const [description, setDescription] = useState('');\n  const [myUserId, setMyUserId] = useState('');\n  const [nextSelectedInvite,setNextSelectedInvite] = useState('');\n  const [inviteList,setInviteList] = useState([]);\n  const [filterFriendList, setFilterFriendList] = useState([]);\n  const [users,setUsers] = useState([]);\n  useEffect(() => {\n      const fetchUsers = async () => {\n          try{\n              const userData = await API.graphql(graphqlOperation(listUsers));\n              console.log(userData);\n              setUsers(userData.data.listUsers.items);\n          }catch(e){\n              console.log(e);\n          }\n      }\n     fetchUsers();\n  }, [])\n  useEffect(() =>{\n  \n       \n        let list = [];\n        users.forEach((element) => {\n            if(element.name.includes(nextSelectedInvite))\n               list.push(element);\n          });\n       setFilterFriendList(list);\n       console.log(filterFriendList)\n    \n  },[nextSelectedInvite])\n    useEffect(() => {\n      const fetchUser = async () => {\n        const userInfo = await Auth.currentAuthenticatedUser();\n\n        setMyUserId(userInfo.attributes.sub);\n      }\n      fetchUser();\n    },[])\n  const onMicrophonePress = () => {\n    console.warn('Microphone')\n  }\n  const onSendPress = async () => {\n  \n    // send the message to the backend\n    try{\n     const newEventData =  await API.graphql(graphqlOperation(createEvents,{input:{content:description,userID:myUserId,chatRoomID}}))\n     console.log(newEventData);\n     \n    }catch(e){\n      console.log(e);\n    }\n\n   \n  }\n  \n  const onPress = () => {\n        onSendPress();\n  }\n \n \n  \n\n  return (\n    <KeyboardAvoidingView behavior={Platform.OS == \"ios\"?\"padding\":\"height\"}\n    keyboardVerticalOffset ={100}style={{width:'100%'}}>\n    <View style={styles.container}>\n      <View style={styles.mainContainer}>\n     \n        <TextInput\n          placeholder={\"Type a message\"}\n          style={styles.textInput}\n          multiline\n          value={nextSelectedInvite}\n          onChangeText={setNextSelectedInvite}\n        />\n       \n          <FlatList\n        data={filterFriendList}\n        renderItem={(item) =><View><Text >{item.name}</Text></View>}\n        keyExtractor={item => item.id}\n      />\n      </View>\n      \n  \n     \n    </View>\n  \n     \n    \n      \n    </KeyboardAvoidingView>\n  )\n}\n\nexport default EventInput;"]},"metadata":{},"sourceType":"module"}