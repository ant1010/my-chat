{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useRoute } from '@react-navigation/native';\nimport ChatMessage from \"../components/ChatMesage\";\nimport { useEffect, useState } from 'react';\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\nimport InputBox from \"../components/InputBox\";\nimport { messagesByChatRoom } from \"../src/graphql/queries\";\nimport { updateChatRoom } from \"../src/graphql/mutations\";\nimport { onCreateMessage } from \"../src/graphql/subscriptions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myId = _useState4[0],\n      setMyId = _useState4[1];\n\n  var route = useRoute();\n\n  var fetchMessages = function fetchMessages() {\n    var messageData;\n    return _regeneratorRuntime.async(function fetchMessages$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(messagesByChatRoom, {\n              chatRoomID: route.params.id,\n              sortDirection: \"DESC\"\n            })));\n\n          case 2:\n            messageData = _context.sent;\n            console.log(route);\n            console.log(messageData.data.messagesByChatRoom.items);\n            setMessages(messageData.data.messagesByChatRoom.items);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var updateChatRoomLastMessage = function updateChatRoomLastMessage(messageId) {\n    return _regeneratorRuntime.async(function updateChatRoomLastMessage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(updateChatRoom, {\n              input: {\n                id: route.params.id,\n                lastMessageID: messageId\n              }\n            })));\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  useEffect(function () {\n    fetchMessages();\n  }, []);\n  useEffect(function () {\n    var getMyId = function getMyId() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getMyId$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context3.sent;\n              setMyId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getMyId();\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n\n        if (newMessage.chatRoomID !== route.params.id) {\n          return;\n        }\n\n        console.log(\"message recieved\");\n        updateChatRoomLastMessage(newMessage.id);\n        fetchMessages();\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n\n  var _onLongPress = function onLongPress() {\n    console.log(\"long press\");\n  };\n\n  return _jsxs(View, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [_jsx(FlatList, {\n      data: messages,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(TouchableOpacity, {\n          onLongPress: function onLongPress() {\n            _onLongPress;\n          },\n          delayLongPress: 3000,\n          children: _jsx(ChatMessage, {\n            myId: myId,\n            message: item\n          })\n        });\n      },\n      inverted: true\n    }), _jsx(InputBox, {\n      chatRoomID: route.params.id\n    })]\n  });\n};\n\nexport default ChatRoomScreen;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/screens/ChatRoomScreen.tsx"],"names":["React","useRoute","ChatMessage","useEffect","useState","API","Auth","graphqlOperation","InputBox","messagesByChatRoom","updateChatRoom","onCreateMessage","ChatRoomScreen","messages","setMessages","myId","setMyId","route","fetchMessages","graphql","chatRoomID","params","id","sortDirection","messageData","console","log","data","items","updateChatRoomLastMessage","messageId","input","lastMessageID","getMyId","currentAuthenticatedUser","userInfo","attributes","sub","subscription","subscribe","next","newMessage","value","unsubscribe","onLongPress","width","height","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {FlatList, Text, ImageBackground ,View,TouchableOpacity,Alert} from 'react-native';\n\nimport { useRoute } from '@react-navigation/native';\n\nimport chatRoomData from '../data/Chats';\nimport ChatMessage from \"../components/ChatMesage\";\nimport {useEffect,useState} from 'react';\nimport {API,Auth,graphqlOperation} from 'aws-amplify';\nimport InputBox from \"../components/InputBox\";\nimport {messagesByChatRoom} from '../src/graphql/queries';\nimport {updateChatRoom} from '../src/graphql/mutations';\nimport {onCreateMessage} from '../src/graphql/subscriptions';\nconst ChatRoomScreen = () => {\n  const [messages,setMessages] = useState([]);\n  const [myId, setMyId] = useState(null);\n  const route = useRoute();\n\n  // console.log(route.params)\n  \n    const fetchMessages = async () => {\n      const messageData = await API.graphql(graphqlOperation(messagesByChatRoom,{chatRoomID:route.params.id,sortDirection:\"DESC\"}))\n      console.log(route);\n      console.log(messageData.data.messagesByChatRoom.items);\n      //updateChatRoomLastMessage(messageData.data.messagesByChatRoom.items[0].id);\n      setMessages(messageData.data.messagesByChatRoom.items);\n      \n      \n      \n    }\n    const updateChatRoomLastMessage = async (messageId:string) => {\n      try{\n        await  API.graphql(graphqlOperation(updateChatRoom,{input:{id:route.params.id,lastMessageID:messageId}}))\n      }catch(e){\n        console.log(e);\n      }\n  \n    }\n    useEffect(() => {\n                    // note mutable flag\n     \n      fetchMessages()\n   \n  },[])\n\n    useEffect(() => {\n    const getMyId = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      setMyId(userInfo.attributes.sub);\n    }\n    getMyId();\n  }, [])  \n\n    useEffect(() =>{\n      const subscription = API.graphql(\n        graphqlOperation(onCreateMessage)).subscribe({next:(data) => {\n          const newMessage = data.value.data.onCreateMessage;\n         \n          \n          if(newMessage.chatRoomID !== route.params.id){\n           \n            return;\n          }\n         \n           console.log(\"message recieved\");\n          // setMessages([newMessage, ...messages]);\n         \n           \n         \n          updateChatRoomLastMessage(newMessage.id);\n         \n          fetchMessages();\n          \n        }})\n      \n      return () => subscription.unsubscribe();\n    },[])\n   const onLongPress = () => {\n     console.log(\"long press\");\n   }\n    return (\n    \n    <View style={{width: '100%', height: '100%'}} >\n    \n      <FlatList\n        data={messages}\n        renderItem={({ item }) => \n        <TouchableOpacity \n        \n        onLongPress={() => {onLongPress}}\n        delayLongPress={3000}\n        ><ChatMessage myId = {myId} message={item} /></TouchableOpacity>}\n        inverted\n      />\n   \n      <InputBox chatRoomID = {route.params.id} />\n    </View>\n     \n  );\n}\n\nexport default ChatRoomScreen;"]},"metadata":{},"sourceType":"module"}