{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport styles from \"./styles\";\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\nimport { createMessage, updateChatRoom } from \"../../src/graphql/mutations\";\nimport { MaterialCommunityIcons, MaterialIcons, FontAwesome5, Entypo, Fontisto } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InputBox = function InputBox(props) {\n  var chatRoomID = props.chatRoomID;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myUserId = _useState4[0],\n      setMyUserId = _useState4[1];\n\n  useEffect(function () {\n    var fetchUser = function fetchUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function fetchUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n              setMyUserId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUser();\n  }, []);\n\n  var onMicrophonePress = function onMicrophonePress() {\n    console.warn('Microphone');\n  };\n\n  var updateChatRoomLastMessage = function updateChatRoomLastMessage(messageId) {\n    return _regeneratorRuntime.async(function updateChatRoomLastMessage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(updateChatRoom, {\n              input: {\n                id: chatRoomID,\n                lastMessageID: messageId\n              }\n            })));\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var onSendPress = function onSendPress() {\n    var newMessageData;\n    return _regeneratorRuntime.async(function onSendPress$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createMessage, {\n              input: {\n                content: message,\n                userID: myUserId,\n                chatRoomID: chatRoomID\n              }\n            })));\n\n          case 3:\n            newMessageData = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(updateChatRoomLastMessage(newMessageData.data.createMessage.id));\n\n          case 6:\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 11:\n            setMessage('');\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var onPress = function onPress() {\n    if (!message) {\n      onMicrophonePress();\n    } else {\n      onSendPress();\n    }\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n    keyboardVerticalOffset: 100,\n    style: {\n      width: '100%'\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.mainContainer,\n        children: [_jsx(FontAwesome5, {\n          name: \"laugh-beam\",\n          size: 24,\n          color: \"grey\"\n        }), _jsx(TextInput, {\n          placeholder: \"Type a message\",\n          style: styles.textInput,\n          multiline: true,\n          value: message,\n          onChangeText: setMessage\n        }), _jsx(Entypo, {\n          name: \"attachment\",\n          size: 24,\n          color: \"grey\",\n          style: styles.icon\n        }), !message && _jsx(Fontisto, {\n          name: \"camera\",\n          size: 24,\n          color: \"grey\",\n          style: styles.icon\n        })]\n      }), _jsx(TouchableOpacity, {\n        onPress: onPress,\n        children: _jsx(View, {\n          style: styles.buttonContainer,\n          children: !message ? _jsx(MaterialCommunityIcons, {\n            name: \"microphone\",\n            size: 28,\n            color: \"white\"\n          }) : _jsx(MaterialIcons, {\n            name: \"send\",\n            size: 28,\n            color: \"white\"\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default InputBox;","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/whatsapp-clone/components/InputBox/index.tsx"],"names":["React","useEffect","useState","styles","API","Auth","graphqlOperation","createMessage","updateChatRoom","MaterialCommunityIcons","MaterialIcons","FontAwesome5","Entypo","Fontisto","InputBox","props","chatRoomID","message","setMessage","myUserId","setMyUserId","fetchUser","currentAuthenticatedUser","userInfo","attributes","sub","onMicrophonePress","console","warn","updateChatRoomLastMessage","messageId","graphql","input","id","lastMessageID","log","onSendPress","content","userID","newMessageData","data","onPress","Platform","OS","width","container","mainContainer","textInput","icon","buttonContainer"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {View, Text, TextInput, TouchableOpacity, KeyboardAvoidingView, Platform,} from \"react-native\";\nimport styles from './styles';\n\nimport {\n  API,\n  Auth,\n  graphqlOperation,\n} from 'aws-amplify';\n\nimport {\n  createMessage,\n  updateChatRoom,\n} from '../../src/graphql/mutations';\n\nimport {\n  MaterialCommunityIcons,\n  MaterialIcons,\n  FontAwesome5,\n  Entypo,\n  Fontisto,\n} from '@expo/vector-icons';\n\nconst InputBox = (props) => {\n\n  const { chatRoomID } = props;\n\n  const [message, setMessage] = useState('');\n  const [myUserId, setMyUserId] = useState(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      setMyUserId(userInfo.attributes.sub);\n    }\n    fetchUser();\n  }, [])\n\n  const onMicrophonePress = () => {\n    console.warn('Microphone')\n  }\n\n  const updateChatRoomLastMessage = async (messageId: string) => {\n    try {\n      await API.graphql(\n        graphqlOperation(\n          updateChatRoom, {\n            input: {\n              id: chatRoomID,\n              lastMessageID: messageId,\n            }\n          }\n        )\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  const onSendPress = async () => {\n    try {\n      const newMessageData = await API.graphql(\n        graphqlOperation(\n          createMessage, {\n            input: {\n              content: message,\n              userID: myUserId,\n              chatRoomID\n            }\n          }\n        )\n      )\n\n      await updateChatRoomLastMessage(newMessageData.data.createMessage.id)\n    } catch (e) {\n      console.log(e);\n    }\n\n    setMessage('');\n  }\n\n  const onPress = () => {\n    if (!message) {\n      onMicrophonePress();\n    } else {\n      onSendPress();\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS == \"ios\" ? \"padding\" : \"height\"}\n      keyboardVerticalOffset={100}\n      style={{width: '100%'}}\n    >\n      <View style={styles.container}>\n      <View style={styles.mainContainer}>\n        <FontAwesome5 name=\"laugh-beam\" size={24} color=\"grey\" />\n        <TextInput\n          placeholder={\"Type a message\"}\n          style={styles.textInput}\n          multiline\n          value={message}\n          onChangeText={setMessage}\n        />\n        <Entypo name=\"attachment\" size={24} color=\"grey\" style={styles.icon} />\n        {!message && <Fontisto name=\"camera\" size={24} color=\"grey\" style={styles.icon} />}\n      </View>\n      <TouchableOpacity onPress={onPress}>\n        <View style={styles.buttonContainer}>\n          {!message\n            ? <MaterialCommunityIcons name=\"microphone\" size={28} color=\"white\" />\n            : <MaterialIcons name=\"send\" size={28} color=\"white\" />}\n        </View>\n      </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nexport default InputBox;"]},"metadata":{},"sourceType":"module"}