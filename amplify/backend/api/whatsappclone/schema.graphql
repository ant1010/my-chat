# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# type User @model @auth(rules: [{ allow: private }]){
#   id: ID!
#   name: String!
#   imageUri: String
#   status: String
#   chatRoom: [ChatRoom] @manyToMany(relationName:"ChatRoomUser")
# }

# type ChatRoomUser @model @auth(rules: [{ allow: private }]){
#   id:ID!
#   userID: ID!@index(name:"byChatRoom",sortKeyFields:["chatRoomID"])
#   chatRoomID:ID!@index(name:"byUser",sortKeyFields:["userID"])
#   user: User @belongsTo(fields:["userID"])
#   chatRoom: ChatRoom @belongsTo(fields:["chatRoomID"])
# }

# type ChatRoom @model @auth(rules: [{ allow: private }]){
#   id:ID!
#   Users:[User] @manyToMany(relationName:"ChatRoomUser")
# }

type User @model @auth(rules: [ { allow: private, operations: [read]},{ allow: owner}]){
  id: ID!
  name: String!
  imageUri: String
  status: String
  contacts:[FriendPair]@connection(keyName: "byUser", fields: ["id"])
  chatRoomUser: [ChatRoomUser] @connection(keyName: "byUser", fields: ["id"])
  eventUser:[EventUser] @connection(keyName: "byUser", fields: ["id"])
}
type FriendPair @model @auth(rules: [{ allow: owner }])
@key(name: "byUser", fields: ["firstUserID","secondUserID"]){
  id:ID!
  firstUserID:ID!
  secondUserID:ID!
  userOne:User @connection(fields:["firstUserID"])
  userTwo:User @connection(fields:["secondUserID"])
  status:String
}

type ChatRoomUser
@model @auth(rules: [{ allow: private }])
@key(name: "byUser", fields: ["userID", "chatRoomID"])
@key(name: "byChatRoom", fields: ["chatRoomID", "userID"])
 {
  id: ID!
  userID: ID!
  chatRoomID: ID!
  user: User @connection(fields: ["userID"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
}

type ChatRoom @model @auth(rules: [{ allow: private }]){
  id: ID!
  chatRoomUsers: [ChatRoomUser] @connection(keyName: "byChatRoom", fields: ["id"])
  messages:[Message] @connection(keyName:"byChatRoom", fields:["id"])
  lastMessageID: ID
  lastMessage: Message @connection(fields:["lastMessageID"])
  
}
type Message @model @auth(rules: [{ allow: private }])@key(name : "byChatRoom",fields:["chatRoomID","createdAt"],queryField:"messagesByChatRoom"){
  id:ID!
  createdAt:String!
  content: String!
  userID: ID!
  chatRoomID: ID!
  user: User @connection(fields: ["userID"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
  
}
type EventUser @model @auth(rules: [{ allow: private }])
@key(name: "byUser", fields: ["userID", "eventRoomID"])
@key(name: "byEventRoom", fields: ["eventRoomID", "userID"]){
  id: ID!
  userID: ID!
  eventRoomID: ID!
  user: User @connection(fields: ["userID"])
  eventRoom: EventRoom @connection(fields: ["eventRoomID"])
}
type EventRoom @model @auth(rules: [{ allow: private }]) {
  id: ID!
  eventUsers: [EventUser] @connection(keyName: "byEventRoom", fields: ["id"])
  events:[Event] @connection( keyName:"byEventRoom",fields:["id"])
  lastEventID:ID
  lastEvent:Event @connection(fields:["lastEventID"])
  
}
type Event @model @auth(rules: [{ allow: private }])@key(name:"byEventRoom",fields:["eventRoomID","eventTime"],queryField:"eventsByEventRoom"){
  id:ID!
  userID:ID!
  title:String!
  createdAt:String!
  content:String
  eventTime:String!
  eventLocation:String!
  user: User @connection(fields: ["userID"])
  eventRoomID:ID!
  eventRoom:EventRoom@connection(fields: ["eventRoomID"])
}